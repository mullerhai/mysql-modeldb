/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.pg_catalog;


import javax.annotation.Generated;

import jooq.postgresql.gen.pg_catalog.tables.Aclexplode;
import jooq.postgresql.gen.pg_catalog.tables.GenerateSeries;
import jooq.postgresql.gen.pg_catalog.tables.GenerateSubscripts;
import jooq.postgresql.gen.pg_catalog.tables.JsonArrayElements;
import jooq.postgresql.gen.pg_catalog.tables.JsonArrayElementsText;
import jooq.postgresql.gen.pg_catalog.tables.JsonEach;
import jooq.postgresql.gen.pg_catalog.tables.JsonEachText;
import jooq.postgresql.gen.pg_catalog.tables.JsonObjectKeys;
import jooq.postgresql.gen.pg_catalog.tables.JsonPopulateRecordset;
import jooq.postgresql.gen.pg_catalog.tables.JsonToRecordset;
import jooq.postgresql.gen.pg_catalog.tables.JsonbArrayElements;
import jooq.postgresql.gen.pg_catalog.tables.JsonbArrayElementsText;
import jooq.postgresql.gen.pg_catalog.tables.JsonbEach;
import jooq.postgresql.gen.pg_catalog.tables.JsonbEachText;
import jooq.postgresql.gen.pg_catalog.tables.JsonbObjectKeys;
import jooq.postgresql.gen.pg_catalog.tables.JsonbPopulateRecordset;
import jooq.postgresql.gen.pg_catalog.tables.JsonbToRecordset;
import jooq.postgresql.gen.pg_catalog.tables.PgAggregate;
import jooq.postgresql.gen.pg_catalog.tables.PgAm;
import jooq.postgresql.gen.pg_catalog.tables.PgAmop;
import jooq.postgresql.gen.pg_catalog.tables.PgAmproc;
import jooq.postgresql.gen.pg_catalog.tables.PgAttrdef;
import jooq.postgresql.gen.pg_catalog.tables.PgAttribute;
import jooq.postgresql.gen.pg_catalog.tables.PgAuthMembers;
import jooq.postgresql.gen.pg_catalog.tables.PgAvailableExtensionVersions;
import jooq.postgresql.gen.pg_catalog.tables.PgAvailableExtensions;
import jooq.postgresql.gen.pg_catalog.tables.PgCast;
import jooq.postgresql.gen.pg_catalog.tables.PgClass;
import jooq.postgresql.gen.pg_catalog.tables.PgCollation;
import jooq.postgresql.gen.pg_catalog.tables.PgConstraint;
import jooq.postgresql.gen.pg_catalog.tables.PgConversion;
import jooq.postgresql.gen.pg_catalog.tables.PgCursor;
import jooq.postgresql.gen.pg_catalog.tables.PgCursors;
import jooq.postgresql.gen.pg_catalog.tables.PgDatabase;
import jooq.postgresql.gen.pg_catalog.tables.PgDbRoleSetting;
import jooq.postgresql.gen.pg_catalog.tables.PgDefaultAcl;
import jooq.postgresql.gen.pg_catalog.tables.PgDepend;
import jooq.postgresql.gen.pg_catalog.tables.PgDescription;
import jooq.postgresql.gen.pg_catalog.tables.PgEnum;
import jooq.postgresql.gen.pg_catalog.tables.PgEventTrigger;
import jooq.postgresql.gen.pg_catalog.tables.PgEventTriggerDdlCommands;
import jooq.postgresql.gen.pg_catalog.tables.PgEventTriggerDroppedObjects;
import jooq.postgresql.gen.pg_catalog.tables.PgExtension;
import jooq.postgresql.gen.pg_catalog.tables.PgExtensionUpdatePaths;
import jooq.postgresql.gen.pg_catalog.tables.PgForeignDataWrapper;
import jooq.postgresql.gen.pg_catalog.tables.PgForeignServer;
import jooq.postgresql.gen.pg_catalog.tables.PgForeignTable;
import jooq.postgresql.gen.pg_catalog.tables.PgGetKeywords;
import jooq.postgresql.gen.pg_catalog.tables.PgGetMultixactMembers;
import jooq.postgresql.gen.pg_catalog.tables.PgGetPublicationTables;
import jooq.postgresql.gen.pg_catalog.tables.PgGetReplicationSlots;
import jooq.postgresql.gen.pg_catalog.tables.PgGroup;
import jooq.postgresql.gen.pg_catalog.tables.PgIndex;
import jooq.postgresql.gen.pg_catalog.tables.PgIndexes;
import jooq.postgresql.gen.pg_catalog.tables.PgInherits;
import jooq.postgresql.gen.pg_catalog.tables.PgInitPrivs;
import jooq.postgresql.gen.pg_catalog.tables.PgLanguage;
import jooq.postgresql.gen.pg_catalog.tables.PgLargeobjectMetadata;
import jooq.postgresql.gen.pg_catalog.tables.PgListeningChannels;
import jooq.postgresql.gen.pg_catalog.tables.PgLockStatus;
import jooq.postgresql.gen.pg_catalog.tables.PgLocks;
import jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotGetBinaryChanges;
import jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotGetChanges;
import jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges;
import jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotPeekChanges;
import jooq.postgresql.gen.pg_catalog.tables.PgLsDir;
import jooq.postgresql.gen.pg_catalog.tables.PgMatviews;
import jooq.postgresql.gen.pg_catalog.tables.PgNamespace;
import jooq.postgresql.gen.pg_catalog.tables.PgOpclass;
import jooq.postgresql.gen.pg_catalog.tables.PgOperator;
import jooq.postgresql.gen.pg_catalog.tables.PgOpfamily;
import jooq.postgresql.gen.pg_catalog.tables.PgOptionsToTable;
import jooq.postgresql.gen.pg_catalog.tables.PgPartitionedTable;
import jooq.postgresql.gen.pg_catalog.tables.PgPltemplate;
import jooq.postgresql.gen.pg_catalog.tables.PgPolicies;
import jooq.postgresql.gen.pg_catalog.tables.PgPolicy;
import jooq.postgresql.gen.pg_catalog.tables.PgPreparedStatement;
import jooq.postgresql.gen.pg_catalog.tables.PgPreparedStatements;
import jooq.postgresql.gen.pg_catalog.tables.PgPreparedXact;
import jooq.postgresql.gen.pg_catalog.tables.PgPreparedXacts;
import jooq.postgresql.gen.pg_catalog.tables.PgProc;
import jooq.postgresql.gen.pg_catalog.tables.PgPublication;
import jooq.postgresql.gen.pg_catalog.tables.PgPublicationRel;
import jooq.postgresql.gen.pg_catalog.tables.PgPublicationTables;
import jooq.postgresql.gen.pg_catalog.tables.PgRange;
import jooq.postgresql.gen.pg_catalog.tables.PgReplicationOrigin;
import jooq.postgresql.gen.pg_catalog.tables.PgReplicationSlots;
import jooq.postgresql.gen.pg_catalog.tables.PgRewrite;
import jooq.postgresql.gen.pg_catalog.tables.PgRoles;
import jooq.postgresql.gen.pg_catalog.tables.PgRules;
import jooq.postgresql.gen.pg_catalog.tables.PgSeclabel;
import jooq.postgresql.gen.pg_catalog.tables.PgSeclabels;
import jooq.postgresql.gen.pg_catalog.tables.PgSequence;
import jooq.postgresql.gen.pg_catalog.tables.PgSequences;
import jooq.postgresql.gen.pg_catalog.tables.PgSettings;
import jooq.postgresql.gen.pg_catalog.tables.PgShdepend;
import jooq.postgresql.gen.pg_catalog.tables.PgShdescription;
import jooq.postgresql.gen.pg_catalog.tables.PgShowAllSettings;
import jooq.postgresql.gen.pg_catalog.tables.PgShowReplicationOriginStatus;
import jooq.postgresql.gen.pg_catalog.tables.PgShseclabel;
import jooq.postgresql.gen.pg_catalog.tables.PgStatActivity;
import jooq.postgresql.gen.pg_catalog.tables.PgStatAllIndexes;
import jooq.postgresql.gen.pg_catalog.tables.PgStatAllTables;
import jooq.postgresql.gen.pg_catalog.tables.PgStatArchiver;
import jooq.postgresql.gen.pg_catalog.tables.PgStatBgwriter;
import jooq.postgresql.gen.pg_catalog.tables.PgStatDatabase;
import jooq.postgresql.gen.pg_catalog.tables.PgStatDatabaseConflicts;
import jooq.postgresql.gen.pg_catalog.tables.PgStatGetActivity;
import jooq.postgresql.gen.pg_catalog.tables.PgStatGetBackendIdset;
import jooq.postgresql.gen.pg_catalog.tables.PgStatGetProgressInfo;
import jooq.postgresql.gen.pg_catalog.tables.PgStatGetWalSenders;
import jooq.postgresql.gen.pg_catalog.tables.PgStatProgressVacuum;
import jooq.postgresql.gen.pg_catalog.tables.PgStatReplication;
import jooq.postgresql.gen.pg_catalog.tables.PgStatSsl;
import jooq.postgresql.gen.pg_catalog.tables.PgStatSubscription;
import jooq.postgresql.gen.pg_catalog.tables.PgStatSysIndexes;
import jooq.postgresql.gen.pg_catalog.tables.PgStatSysTables;
import jooq.postgresql.gen.pg_catalog.tables.PgStatUserFunctions;
import jooq.postgresql.gen.pg_catalog.tables.PgStatUserIndexes;
import jooq.postgresql.gen.pg_catalog.tables.PgStatUserTables;
import jooq.postgresql.gen.pg_catalog.tables.PgStatWalReceiver;
import jooq.postgresql.gen.pg_catalog.tables.PgStatXactAllTables;
import jooq.postgresql.gen.pg_catalog.tables.PgStatXactSysTables;
import jooq.postgresql.gen.pg_catalog.tables.PgStatXactUserFunctions;
import jooq.postgresql.gen.pg_catalog.tables.PgStatXactUserTables;
import jooq.postgresql.gen.pg_catalog.tables.PgStatioAllIndexes;
import jooq.postgresql.gen.pg_catalog.tables.PgStatioAllSequences;
import jooq.postgresql.gen.pg_catalog.tables.PgStatioAllTables;
import jooq.postgresql.gen.pg_catalog.tables.PgStatioSysIndexes;
import jooq.postgresql.gen.pg_catalog.tables.PgStatioSysSequences;
import jooq.postgresql.gen.pg_catalog.tables.PgStatioSysTables;
import jooq.postgresql.gen.pg_catalog.tables.PgStatioUserIndexes;
import jooq.postgresql.gen.pg_catalog.tables.PgStatioUserSequences;
import jooq.postgresql.gen.pg_catalog.tables.PgStatioUserTables;
import jooq.postgresql.gen.pg_catalog.tables.PgStatisticExt;
import jooq.postgresql.gen.pg_catalog.tables.PgStats;
import jooq.postgresql.gen.pg_catalog.tables.PgSubscription;
import jooq.postgresql.gen.pg_catalog.tables.PgSubscriptionRel;
import jooq.postgresql.gen.pg_catalog.tables.PgTables;
import jooq.postgresql.gen.pg_catalog.tables.PgTablespace;
import jooq.postgresql.gen.pg_catalog.tables.PgTablespaceDatabases;
import jooq.postgresql.gen.pg_catalog.tables.PgTimezoneAbbrevs;
import jooq.postgresql.gen.pg_catalog.tables.PgTimezoneNames;
import jooq.postgresql.gen.pg_catalog.tables.PgTransform;
import jooq.postgresql.gen.pg_catalog.tables.PgTrigger;
import jooq.postgresql.gen.pg_catalog.tables.PgTsConfig;
import jooq.postgresql.gen.pg_catalog.tables.PgTsConfigMap;
import jooq.postgresql.gen.pg_catalog.tables.PgTsDict;
import jooq.postgresql.gen.pg_catalog.tables.PgTsParser;
import jooq.postgresql.gen.pg_catalog.tables.PgTsTemplate;
import jooq.postgresql.gen.pg_catalog.tables.PgType;
import jooq.postgresql.gen.pg_catalog.tables.PgUser;
import jooq.postgresql.gen.pg_catalog.tables.PgUserMappings;
import jooq.postgresql.gen.pg_catalog.tables.PgViews;
import jooq.postgresql.gen.pg_catalog.tables.RegexpMatches;
import jooq.postgresql.gen.pg_catalog.tables.RegexpSplitToTable;
import jooq.postgresql.gen.pg_catalog.tables.TsDebug;
import jooq.postgresql.gen.pg_catalog.tables.TsParse;
import jooq.postgresql.gen.pg_catalog.tables.TsStat;
import jooq.postgresql.gen.pg_catalog.tables.TsTokenType;
import jooq.postgresql.gen.pg_catalog.tables.TxidSnapshotXip;
import jooq.postgresql.gen.pg_catalog.tables.Unnest;
import jooq.postgresql.gen.pg_catalog.tables.records.AclexplodeRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.GenerateSeriesRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.GenerateSubscriptsRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.JsonArrayElementsRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.JsonArrayElementsTextRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.JsonEachRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.JsonEachTextRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.JsonObjectKeysRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.JsonPopulateRecordsetRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.JsonToRecordsetRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.JsonbArrayElementsRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.JsonbArrayElementsTextRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.JsonbEachRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.JsonbEachTextRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.JsonbObjectKeysRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.JsonbPopulateRecordsetRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.JsonbToRecordsetRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgAvailableExtensionVersionsRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgAvailableExtensionsRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgCursorRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgEventTriggerDdlCommandsRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgEventTriggerDroppedObjectsRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgExtensionUpdatePathsRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgGetKeywordsRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgGetMultixactMembersRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgGetPublicationTablesRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgGetReplicationSlotsRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgListeningChannelsRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgLockStatusRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgLogicalSlotGetBinaryChangesRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgLogicalSlotGetChangesRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgLogicalSlotPeekBinaryChangesRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgLogicalSlotPeekChangesRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgLsDirRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgOptionsToTableRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgPreparedStatementRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgPreparedXactRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgShowAllSettingsRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgShowReplicationOriginStatusRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgStatGetActivityRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgStatGetBackendIdsetRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgStatGetProgressInfoRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgStatGetWalSendersRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.PgTablespaceDatabasesRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.RegexpMatchesRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.RegexpSplitToTableRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.TsDebugRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.TsParseRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.TsStatRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.TsTokenTypeRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.TxidSnapshotXipRecord;
import jooq.postgresql.gen.pg_catalog.tables.records.UnnestRecord;

import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Result;


/**
 * Convenience access to all tables in pg_catalog
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tables {

    /**
     * The table <code>pg_catalog.aclexplode</code>.
     */
    public static final Aclexplode ACLEXPLODE = jooq.postgresql.gen.pg_catalog.tables.Aclexplode.ACLEXPLODE;

    /**
     * Call <code>pg_catalog.aclexplode</code>.
     */
    public static Result<AclexplodeRecord> ACLEXPLODE(Configuration configuration, String[] acl) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(acl)).fetch();
    }

    /**
     * Get <code>pg_catalog.aclexplode</code> as a table.
     */
    public static Aclexplode ACLEXPLODE(String[] acl) {
        return jooq.postgresql.gen.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(acl);
    }

    /**
     * Get <code>pg_catalog.aclexplode</code> as a table.
     */
    public static Aclexplode ACLEXPLODE(Field<String[]> acl) {
        return jooq.postgresql.gen.pg_catalog.tables.Aclexplode.ACLEXPLODE.call(acl);
    }

    /**
     * The table <code>pg_catalog.generate_series</code>.
     */
    public static final GenerateSeries GENERATE_SERIES = jooq.postgresql.gen.pg_catalog.tables.GenerateSeries.GENERATE_SERIES;

    /**
     * Call <code>pg_catalog.generate_series</code>.
     */
    public static Result<GenerateSeriesRecord> GENERATE_SERIES(Configuration configuration, Integer __1, Integer __2) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(__1, __2)).fetch();
    }

    /**
     * Get <code>pg_catalog.generate_series</code> as a table.
     */
    public static GenerateSeries GENERATE_SERIES(Integer __1, Integer __2) {
        return jooq.postgresql.gen.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(__1, __2);
    }

    /**
     * Get <code>pg_catalog.generate_series</code> as a table.
     */
    public static GenerateSeries GENERATE_SERIES(Field<Integer> __1, Field<Integer> __2) {
        return jooq.postgresql.gen.pg_catalog.tables.GenerateSeries.GENERATE_SERIES.call(__1, __2);
    }

    /**
     * The table <code>pg_catalog.generate_subscripts</code>.
     */
    public static final GenerateSubscripts GENERATE_SUBSCRIPTS = jooq.postgresql.gen.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<GenerateSubscriptsRecord> GENERATE_SUBSCRIPTS(Configuration configuration, Object __1, Integer __2, Boolean __3) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(__1, __2, __3)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static GenerateSubscripts GENERATE_SUBSCRIPTS(Object __1, Integer __2, Boolean __3) {
        return jooq.postgresql.gen.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(__1, __2, __3);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static GenerateSubscripts GENERATE_SUBSCRIPTS(Field<Object> __1, Field<Integer> __2, Field<Boolean> __3) {
        return jooq.postgresql.gen.pg_catalog.tables.GenerateSubscripts.GENERATE_SUBSCRIPTS.call(__1, __2, __3);
    }

    /**
     * The table <code>pg_catalog.json_array_elements</code>.
     */
    public static final JsonArrayElements JSON_ARRAY_ELEMENTS = jooq.postgresql.gen.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<JsonArrayElementsRecord> JSON_ARRAY_ELEMENTS(Configuration configuration, Object fromJson) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(fromJson)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonArrayElements JSON_ARRAY_ELEMENTS(Object fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(fromJson);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonArrayElements JSON_ARRAY_ELEMENTS(Field<Object> fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonArrayElements.JSON_ARRAY_ELEMENTS.call(fromJson);
    }

    /**
     * The table <code>pg_catalog.json_array_elements_text</code>.
     */
    public static final JsonArrayElementsText JSON_ARRAY_ELEMENTS_TEXT = jooq.postgresql.gen.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<JsonArrayElementsTextRecord> JSON_ARRAY_ELEMENTS_TEXT(Configuration configuration, Object fromJson) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(fromJson)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonArrayElementsText JSON_ARRAY_ELEMENTS_TEXT(Object fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(fromJson);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonArrayElementsText JSON_ARRAY_ELEMENTS_TEXT(Field<Object> fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonArrayElementsText.JSON_ARRAY_ELEMENTS_TEXT.call(fromJson);
    }

    /**
     * The table <code>pg_catalog.json_each</code>.
     */
    public static final JsonEach JSON_EACH = jooq.postgresql.gen.pg_catalog.tables.JsonEach.JSON_EACH;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<JsonEachRecord> JSON_EACH(Configuration configuration, Object fromJson) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.JsonEach.JSON_EACH.call(fromJson)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonEach JSON_EACH(Object fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonEach.JSON_EACH.call(fromJson);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonEach JSON_EACH(Field<Object> fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonEach.JSON_EACH.call(fromJson);
    }

    /**
     * The table <code>pg_catalog.json_each_text</code>.
     */
    public static final JsonEachText JSON_EACH_TEXT = jooq.postgresql.gen.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<JsonEachTextRecord> JSON_EACH_TEXT(Configuration configuration, Object fromJson) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(fromJson)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonEachText JSON_EACH_TEXT(Object fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(fromJson);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonEachText JSON_EACH_TEXT(Field<Object> fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonEachText.JSON_EACH_TEXT.call(fromJson);
    }

    /**
     * The table <code>pg_catalog.json_object_keys</code>.
     */
    public static final JsonObjectKeys JSON_OBJECT_KEYS = jooq.postgresql.gen.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<JsonObjectKeysRecord> JSON_OBJECT_KEYS(Configuration configuration, Object __1) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(__1)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonObjectKeys JSON_OBJECT_KEYS(Object __1) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(__1);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonObjectKeys JSON_OBJECT_KEYS(Field<Object> __1) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonObjectKeys.JSON_OBJECT_KEYS.call(__1);
    }

    /**
     * The table <code>pg_catalog.json_populate_recordset</code>.
     */
    public static final JsonPopulateRecordset JSON_POPULATE_RECORDSET = jooq.postgresql.gen.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<JsonPopulateRecordsetRecord> JSON_POPULATE_RECORDSET(Configuration configuration, Object base, Object fromJson, Boolean useJsonAsText) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(base, fromJson, useJsonAsText)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonPopulateRecordset JSON_POPULATE_RECORDSET(Object base, Object fromJson, Boolean useJsonAsText) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(base, fromJson, useJsonAsText);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonPopulateRecordset JSON_POPULATE_RECORDSET(Field<Object> base, Field<Object> fromJson, Field<Boolean> useJsonAsText) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonPopulateRecordset.JSON_POPULATE_RECORDSET.call(base, fromJson, useJsonAsText);
    }

    /**
     * The table <code>pg_catalog.json_to_recordset</code>.
     */
    public static final JsonToRecordset JSON_TO_RECORDSET = jooq.postgresql.gen.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<JsonToRecordsetRecord> JSON_TO_RECORDSET(Configuration configuration, Object __1) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(__1)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonToRecordset JSON_TO_RECORDSET(Object __1) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(__1);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonToRecordset JSON_TO_RECORDSET(Field<Object> __1) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonToRecordset.JSON_TO_RECORDSET.call(__1);
    }

    /**
     * The table <code>pg_catalog.jsonb_array_elements</code>.
     */
    public static final JsonbArrayElements JSONB_ARRAY_ELEMENTS = jooq.postgresql.gen.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<JsonbArrayElementsRecord> JSONB_ARRAY_ELEMENTS(Configuration configuration, Object fromJson) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(fromJson)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonbArrayElements JSONB_ARRAY_ELEMENTS(Object fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(fromJson);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonbArrayElements JSONB_ARRAY_ELEMENTS(Field<Object> fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonbArrayElements.JSONB_ARRAY_ELEMENTS.call(fromJson);
    }

    /**
     * The table <code>pg_catalog.jsonb_array_elements_text</code>.
     */
    public static final JsonbArrayElementsText JSONB_ARRAY_ELEMENTS_TEXT = jooq.postgresql.gen.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<JsonbArrayElementsTextRecord> JSONB_ARRAY_ELEMENTS_TEXT(Configuration configuration, Object fromJson) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(fromJson)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonbArrayElementsText JSONB_ARRAY_ELEMENTS_TEXT(Object fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(fromJson);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonbArrayElementsText JSONB_ARRAY_ELEMENTS_TEXT(Field<Object> fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonbArrayElementsText.JSONB_ARRAY_ELEMENTS_TEXT.call(fromJson);
    }

    /**
     * The table <code>pg_catalog.jsonb_each</code>.
     */
    public static final JsonbEach JSONB_EACH = jooq.postgresql.gen.pg_catalog.tables.JsonbEach.JSONB_EACH;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<JsonbEachRecord> JSONB_EACH(Configuration configuration, Object fromJson) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.JsonbEach.JSONB_EACH.call(fromJson)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonbEach JSONB_EACH(Object fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonbEach.JSONB_EACH.call(fromJson);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonbEach JSONB_EACH(Field<Object> fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonbEach.JSONB_EACH.call(fromJson);
    }

    /**
     * The table <code>pg_catalog.jsonb_each_text</code>.
     */
    public static final JsonbEachText JSONB_EACH_TEXT = jooq.postgresql.gen.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<JsonbEachTextRecord> JSONB_EACH_TEXT(Configuration configuration, Object fromJson) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(fromJson)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonbEachText JSONB_EACH_TEXT(Object fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(fromJson);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonbEachText JSONB_EACH_TEXT(Field<Object> fromJson) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonbEachText.JSONB_EACH_TEXT.call(fromJson);
    }

    /**
     * The table <code>pg_catalog.jsonb_object_keys</code>.
     */
    public static final JsonbObjectKeys JSONB_OBJECT_KEYS = jooq.postgresql.gen.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<JsonbObjectKeysRecord> JSONB_OBJECT_KEYS(Configuration configuration, Object __1) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(__1)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonbObjectKeys JSONB_OBJECT_KEYS(Object __1) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(__1);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonbObjectKeys JSONB_OBJECT_KEYS(Field<Object> __1) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonbObjectKeys.JSONB_OBJECT_KEYS.call(__1);
    }

    /**
     * The table <code>pg_catalog.jsonb_populate_recordset</code>.
     */
    public static final JsonbPopulateRecordset JSONB_POPULATE_RECORDSET = jooq.postgresql.gen.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<JsonbPopulateRecordsetRecord> JSONB_POPULATE_RECORDSET(Configuration configuration, Object __1, Object __2) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(__1, __2)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonbPopulateRecordset JSONB_POPULATE_RECORDSET(Object __1, Object __2) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(__1, __2);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonbPopulateRecordset JSONB_POPULATE_RECORDSET(Field<Object> __1, Field<Object> __2) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonbPopulateRecordset.JSONB_POPULATE_RECORDSET.call(__1, __2);
    }

    /**
     * The table <code>pg_catalog.jsonb_to_recordset</code>.
     */
    public static final JsonbToRecordset JSONB_TO_RECORDSET = jooq.postgresql.gen.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<JsonbToRecordsetRecord> JSONB_TO_RECORDSET(Configuration configuration, Object __1) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(__1)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonbToRecordset JSONB_TO_RECORDSET(Object __1) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(__1);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static JsonbToRecordset JSONB_TO_RECORDSET(Field<Object> __1) {
        return jooq.postgresql.gen.pg_catalog.tables.JsonbToRecordset.JSONB_TO_RECORDSET.call(__1);
    }

    /**
     * The table <code>pg_catalog.pg_aggregate</code>.
     */
    public static final PgAggregate PG_AGGREGATE = jooq.postgresql.gen.pg_catalog.tables.PgAggregate.PG_AGGREGATE;

    /**
     * The table <code>pg_catalog.pg_am</code>.
     */
    public static final PgAm PG_AM = jooq.postgresql.gen.pg_catalog.tables.PgAm.PG_AM;

    /**
     * The table <code>pg_catalog.pg_amop</code>.
     */
    public static final PgAmop PG_AMOP = jooq.postgresql.gen.pg_catalog.tables.PgAmop.PG_AMOP;

    /**
     * The table <code>pg_catalog.pg_amproc</code>.
     */
    public static final PgAmproc PG_AMPROC = jooq.postgresql.gen.pg_catalog.tables.PgAmproc.PG_AMPROC;

    /**
     * The table <code>pg_catalog.pg_attrdef</code>.
     */
    public static final PgAttrdef PG_ATTRDEF = jooq.postgresql.gen.pg_catalog.tables.PgAttrdef.PG_ATTRDEF;

    /**
     * The table <code>pg_catalog.pg_attribute</code>.
     */
    public static final PgAttribute PG_ATTRIBUTE = jooq.postgresql.gen.pg_catalog.tables.PgAttribute.PG_ATTRIBUTE;

    /**
     * The table <code>pg_catalog.pg_auth_members</code>.
     */
    public static final PgAuthMembers PG_AUTH_MEMBERS = jooq.postgresql.gen.pg_catalog.tables.PgAuthMembers.PG_AUTH_MEMBERS;

    /**
     * The table <code>pg_catalog.pg_available_extension_versions</code>.
     */
    public static final PgAvailableExtensionVersions PG_AVAILABLE_EXTENSION_VERSIONS = jooq.postgresql.gen.pg_catalog.tables.PgAvailableExtensionVersions.PG_AVAILABLE_EXTENSION_VERSIONS;

    /**
     * Call <code>pg_catalog.pg_available_extension_versions</code>.
     */
    public static Result<PgAvailableExtensionVersionsRecord> PG_AVAILABLE_EXTENSION_VERSIONS(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgAvailableExtensionVersions.PG_AVAILABLE_EXTENSION_VERSIONS.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_available_extension_versions</code> as a table.
     */
    public static PgAvailableExtensionVersions PG_AVAILABLE_EXTENSION_VERSIONS() {
        return jooq.postgresql.gen.pg_catalog.tables.PgAvailableExtensionVersions.PG_AVAILABLE_EXTENSION_VERSIONS.call();
    }

    /**
     * The table <code>pg_catalog.pg_available_extensions</code>.
     */
    public static final PgAvailableExtensions PG_AVAILABLE_EXTENSIONS = jooq.postgresql.gen.pg_catalog.tables.PgAvailableExtensions.PG_AVAILABLE_EXTENSIONS;

    /**
     * Call <code>pg_catalog.pg_available_extensions</code>.
     */
    public static Result<PgAvailableExtensionsRecord> PG_AVAILABLE_EXTENSIONS(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgAvailableExtensions.PG_AVAILABLE_EXTENSIONS.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_available_extensions</code> as a table.
     */
    public static PgAvailableExtensions PG_AVAILABLE_EXTENSIONS() {
        return jooq.postgresql.gen.pg_catalog.tables.PgAvailableExtensions.PG_AVAILABLE_EXTENSIONS.call();
    }

    /**
     * The table <code>pg_catalog.pg_cast</code>.
     */
    public static final PgCast PG_CAST = jooq.postgresql.gen.pg_catalog.tables.PgCast.PG_CAST;

    /**
     * The table <code>pg_catalog.pg_class</code>.
     */
    public static final PgClass PG_CLASS = jooq.postgresql.gen.pg_catalog.tables.PgClass.PG_CLASS;

    /**
     * The table <code>pg_catalog.pg_collation</code>.
     */
    public static final PgCollation PG_COLLATION = jooq.postgresql.gen.pg_catalog.tables.PgCollation.PG_COLLATION;

    /**
     * The table <code>pg_catalog.pg_constraint</code>.
     */
    public static final PgConstraint PG_CONSTRAINT = jooq.postgresql.gen.pg_catalog.tables.PgConstraint.PG_CONSTRAINT;

    /**
     * The table <code>pg_catalog.pg_conversion</code>.
     */
    public static final PgConversion PG_CONVERSION = jooq.postgresql.gen.pg_catalog.tables.PgConversion.PG_CONVERSION;

    /**
     * The table <code>pg_catalog.pg_cursor</code>.
     */
    public static final PgCursor PG_CURSOR = jooq.postgresql.gen.pg_catalog.tables.PgCursor.PG_CURSOR;

    /**
     * Call <code>pg_catalog.pg_cursor</code>.
     */
    public static Result<PgCursorRecord> PG_CURSOR(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgCursor.PG_CURSOR.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_cursor</code> as a table.
     */
    public static PgCursor PG_CURSOR() {
        return jooq.postgresql.gen.pg_catalog.tables.PgCursor.PG_CURSOR.call();
    }

    /**
     * The table <code>pg_catalog.pg_cursors</code>.
     */
    public static final PgCursors PG_CURSORS = jooq.postgresql.gen.pg_catalog.tables.PgCursors.PG_CURSORS;

    /**
     * The table <code>pg_catalog.pg_database</code>.
     */
    public static final PgDatabase PG_DATABASE = jooq.postgresql.gen.pg_catalog.tables.PgDatabase.PG_DATABASE;

    /**
     * The table <code>pg_catalog.pg_db_role_setting</code>.
     */
    public static final PgDbRoleSetting PG_DB_ROLE_SETTING = jooq.postgresql.gen.pg_catalog.tables.PgDbRoleSetting.PG_DB_ROLE_SETTING;

    /**
     * The table <code>pg_catalog.pg_default_acl</code>.
     */
    public static final PgDefaultAcl PG_DEFAULT_ACL = jooq.postgresql.gen.pg_catalog.tables.PgDefaultAcl.PG_DEFAULT_ACL;

    /**
     * The table <code>pg_catalog.pg_depend</code>.
     */
    public static final PgDepend PG_DEPEND = jooq.postgresql.gen.pg_catalog.tables.PgDepend.PG_DEPEND;

    /**
     * The table <code>pg_catalog.pg_description</code>.
     */
    public static final PgDescription PG_DESCRIPTION = jooq.postgresql.gen.pg_catalog.tables.PgDescription.PG_DESCRIPTION;

    /**
     * The table <code>pg_catalog.pg_enum</code>.
     */
    public static final PgEnum PG_ENUM = jooq.postgresql.gen.pg_catalog.tables.PgEnum.PG_ENUM;

    /**
     * The table <code>pg_catalog.pg_event_trigger</code>.
     */
    public static final PgEventTrigger PG_EVENT_TRIGGER = jooq.postgresql.gen.pg_catalog.tables.PgEventTrigger.PG_EVENT_TRIGGER;

    /**
     * The table <code>pg_catalog.pg_event_trigger_ddl_commands</code>.
     */
    public static final PgEventTriggerDdlCommands PG_EVENT_TRIGGER_DDL_COMMANDS = jooq.postgresql.gen.pg_catalog.tables.PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS;

    /**
     * Call <code>pg_catalog.pg_event_trigger_ddl_commands</code>.
     */
    public static Result<PgEventTriggerDdlCommandsRecord> PG_EVENT_TRIGGER_DDL_COMMANDS(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_event_trigger_ddl_commands</code> as a table.
     */
    public static PgEventTriggerDdlCommands PG_EVENT_TRIGGER_DDL_COMMANDS() {
        return jooq.postgresql.gen.pg_catalog.tables.PgEventTriggerDdlCommands.PG_EVENT_TRIGGER_DDL_COMMANDS.call();
    }

    /**
     * The table <code>pg_catalog.pg_event_trigger_dropped_objects</code>.
     */
    public static final PgEventTriggerDroppedObjects PG_EVENT_TRIGGER_DROPPED_OBJECTS = jooq.postgresql.gen.pg_catalog.tables.PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS;

    /**
     * Call <code>pg_catalog.pg_event_trigger_dropped_objects</code>.
     */
    public static Result<PgEventTriggerDroppedObjectsRecord> PG_EVENT_TRIGGER_DROPPED_OBJECTS(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_event_trigger_dropped_objects</code> as a table.
     */
    public static PgEventTriggerDroppedObjects PG_EVENT_TRIGGER_DROPPED_OBJECTS() {
        return jooq.postgresql.gen.pg_catalog.tables.PgEventTriggerDroppedObjects.PG_EVENT_TRIGGER_DROPPED_OBJECTS.call();
    }

    /**
     * The table <code>pg_catalog.pg_extension</code>.
     */
    public static final PgExtension PG_EXTENSION = jooq.postgresql.gen.pg_catalog.tables.PgExtension.PG_EXTENSION;

    /**
     * The table <code>pg_catalog.pg_extension_update_paths</code>.
     */
    public static final PgExtensionUpdatePaths PG_EXTENSION_UPDATE_PATHS = jooq.postgresql.gen.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS;

    /**
     * Call <code>pg_catalog.pg_extension_update_paths</code>.
     */
    public static Result<PgExtensionUpdatePathsRecord> PG_EXTENSION_UPDATE_PATHS(Configuration configuration, String name) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(name)).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_extension_update_paths</code> as a table.
     */
    public static PgExtensionUpdatePaths PG_EXTENSION_UPDATE_PATHS(String name) {
        return jooq.postgresql.gen.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(name);
    }

    /**
     * Get <code>pg_catalog.pg_extension_update_paths</code> as a table.
     */
    public static PgExtensionUpdatePaths PG_EXTENSION_UPDATE_PATHS(Field<String> name) {
        return jooq.postgresql.gen.pg_catalog.tables.PgExtensionUpdatePaths.PG_EXTENSION_UPDATE_PATHS.call(name);
    }

    /**
     * The table <code>pg_catalog.pg_foreign_data_wrapper</code>.
     */
    public static final PgForeignDataWrapper PG_FOREIGN_DATA_WRAPPER = jooq.postgresql.gen.pg_catalog.tables.PgForeignDataWrapper.PG_FOREIGN_DATA_WRAPPER;

    /**
     * The table <code>pg_catalog.pg_foreign_server</code>.
     */
    public static final PgForeignServer PG_FOREIGN_SERVER = jooq.postgresql.gen.pg_catalog.tables.PgForeignServer.PG_FOREIGN_SERVER;

    /**
     * The table <code>pg_catalog.pg_foreign_table</code>.
     */
    public static final PgForeignTable PG_FOREIGN_TABLE = jooq.postgresql.gen.pg_catalog.tables.PgForeignTable.PG_FOREIGN_TABLE;

    /**
     * The table <code>pg_catalog.pg_get_keywords</code>.
     */
    public static final PgGetKeywords PG_GET_KEYWORDS = jooq.postgresql.gen.pg_catalog.tables.PgGetKeywords.PG_GET_KEYWORDS;

    /**
     * Call <code>pg_catalog.pg_get_keywords</code>.
     */
    public static Result<PgGetKeywordsRecord> PG_GET_KEYWORDS(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgGetKeywords.PG_GET_KEYWORDS.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_get_keywords</code> as a table.
     */
    public static PgGetKeywords PG_GET_KEYWORDS() {
        return jooq.postgresql.gen.pg_catalog.tables.PgGetKeywords.PG_GET_KEYWORDS.call();
    }

    /**
     * The table <code>pg_catalog.pg_get_multixact_members</code>.
     */
    public static final PgGetMultixactMembers PG_GET_MULTIXACT_MEMBERS = jooq.postgresql.gen.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS;

    /**
     * Call <code>pg_catalog.pg_get_multixact_members</code>.
     */
    public static Result<PgGetMultixactMembersRecord> PG_GET_MULTIXACT_MEMBERS(Configuration configuration, Long multixid) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(multixid)).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_get_multixact_members</code> as a table.
     */
    public static PgGetMultixactMembers PG_GET_MULTIXACT_MEMBERS(Long multixid) {
        return jooq.postgresql.gen.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(multixid);
    }

    /**
     * Get <code>pg_catalog.pg_get_multixact_members</code> as a table.
     */
    public static PgGetMultixactMembers PG_GET_MULTIXACT_MEMBERS(Field<Long> multixid) {
        return jooq.postgresql.gen.pg_catalog.tables.PgGetMultixactMembers.PG_GET_MULTIXACT_MEMBERS.call(multixid);
    }

    /**
     * The table <code>pg_catalog.pg_get_publication_tables</code>.
     */
    public static final PgGetPublicationTables PG_GET_PUBLICATION_TABLES = jooq.postgresql.gen.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES;

    /**
     * Call <code>pg_catalog.pg_get_publication_tables</code>.
     */
    public static Result<PgGetPublicationTablesRecord> PG_GET_PUBLICATION_TABLES(Configuration configuration, String pubname) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(pubname)).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_get_publication_tables</code> as a table.
     */
    public static PgGetPublicationTables PG_GET_PUBLICATION_TABLES(String pubname) {
        return jooq.postgresql.gen.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(pubname);
    }

    /**
     * Get <code>pg_catalog.pg_get_publication_tables</code> as a table.
     */
    public static PgGetPublicationTables PG_GET_PUBLICATION_TABLES(Field<String> pubname) {
        return jooq.postgresql.gen.pg_catalog.tables.PgGetPublicationTables.PG_GET_PUBLICATION_TABLES.call(pubname);
    }

    /**
     * The table <code>pg_catalog.pg_get_replication_slots</code>.
     */
    public static final PgGetReplicationSlots PG_GET_REPLICATION_SLOTS = jooq.postgresql.gen.pg_catalog.tables.PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS;

    /**
     * Call <code>pg_catalog.pg_get_replication_slots</code>.
     */
    public static Result<PgGetReplicationSlotsRecord> PG_GET_REPLICATION_SLOTS(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_get_replication_slots</code> as a table.
     */
    public static PgGetReplicationSlots PG_GET_REPLICATION_SLOTS() {
        return jooq.postgresql.gen.pg_catalog.tables.PgGetReplicationSlots.PG_GET_REPLICATION_SLOTS.call();
    }

    /**
     * The table <code>pg_catalog.pg_group</code>.
     */
    public static final PgGroup PG_GROUP = jooq.postgresql.gen.pg_catalog.tables.PgGroup.PG_GROUP;

    /**
     * The table <code>pg_catalog.pg_index</code>.
     */
    public static final PgIndex PG_INDEX = jooq.postgresql.gen.pg_catalog.tables.PgIndex.PG_INDEX;

    /**
     * The table <code>pg_catalog.pg_indexes</code>.
     */
    public static final PgIndexes PG_INDEXES = jooq.postgresql.gen.pg_catalog.tables.PgIndexes.PG_INDEXES;

    /**
     * The table <code>pg_catalog.pg_inherits</code>.
     */
    public static final PgInherits PG_INHERITS = jooq.postgresql.gen.pg_catalog.tables.PgInherits.PG_INHERITS;

    /**
     * The table <code>pg_catalog.pg_init_privs</code>.
     */
    public static final PgInitPrivs PG_INIT_PRIVS = jooq.postgresql.gen.pg_catalog.tables.PgInitPrivs.PG_INIT_PRIVS;

    /**
     * The table <code>pg_catalog.pg_language</code>.
     */
    public static final PgLanguage PG_LANGUAGE = jooq.postgresql.gen.pg_catalog.tables.PgLanguage.PG_LANGUAGE;

    /**
     * The table <code>pg_catalog.pg_largeobject_metadata</code>.
     */
    public static final PgLargeobjectMetadata PG_LARGEOBJECT_METADATA = jooq.postgresql.gen.pg_catalog.tables.PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA;

    /**
     * The table <code>pg_catalog.pg_listening_channels</code>.
     */
    public static final PgListeningChannels PG_LISTENING_CHANNELS = jooq.postgresql.gen.pg_catalog.tables.PgListeningChannels.PG_LISTENING_CHANNELS;

    /**
     * Call <code>pg_catalog.pg_listening_channels</code>.
     */
    public static Result<PgListeningChannelsRecord> PG_LISTENING_CHANNELS(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgListeningChannels.PG_LISTENING_CHANNELS.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_listening_channels</code> as a table.
     */
    public static PgListeningChannels PG_LISTENING_CHANNELS() {
        return jooq.postgresql.gen.pg_catalog.tables.PgListeningChannels.PG_LISTENING_CHANNELS.call();
    }

    /**
     * The table <code>pg_catalog.pg_lock_status</code>.
     */
    public static final PgLockStatus PG_LOCK_STATUS = jooq.postgresql.gen.pg_catalog.tables.PgLockStatus.PG_LOCK_STATUS;

    /**
     * Call <code>pg_catalog.pg_lock_status</code>.
     */
    public static Result<PgLockStatusRecord> PG_LOCK_STATUS(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgLockStatus.PG_LOCK_STATUS.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_lock_status</code> as a table.
     */
    public static PgLockStatus PG_LOCK_STATUS() {
        return jooq.postgresql.gen.pg_catalog.tables.PgLockStatus.PG_LOCK_STATUS.call();
    }

    /**
     * The table <code>pg_catalog.pg_locks</code>.
     */
    public static final PgLocks PG_LOCKS = jooq.postgresql.gen.pg_catalog.tables.PgLocks.PG_LOCKS;

    /**
     * The table <code>pg_catalog.pg_logical_slot_get_binary_changes</code>.
     */
    public static final PgLogicalSlotGetBinaryChanges PG_LOGICAL_SLOT_GET_BINARY_CHANGES = jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<PgLogicalSlotGetBinaryChangesRecord> PG_LOGICAL_SLOT_GET_BINARY_CHANGES(Configuration configuration, String slotName, Object uptoLsn, Integer uptoNchanges, String[] options) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(slotName, uptoLsn, uptoNchanges, options)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static PgLogicalSlotGetBinaryChanges PG_LOGICAL_SLOT_GET_BINARY_CHANGES(String slotName, Object uptoLsn, Integer uptoNchanges, String[] options) {
        return jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(slotName, uptoLsn, uptoNchanges, options);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static PgLogicalSlotGetBinaryChanges PG_LOGICAL_SLOT_GET_BINARY_CHANGES(Field<String> slotName, Field<Object> uptoLsn, Field<Integer> uptoNchanges, Field<String[]> options) {
        return jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotGetBinaryChanges.PG_LOGICAL_SLOT_GET_BINARY_CHANGES.call(slotName, uptoLsn, uptoNchanges, options);
    }

    /**
     * The table <code>pg_catalog.pg_logical_slot_get_changes</code>.
     */
    public static final PgLogicalSlotGetChanges PG_LOGICAL_SLOT_GET_CHANGES = jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<PgLogicalSlotGetChangesRecord> PG_LOGICAL_SLOT_GET_CHANGES(Configuration configuration, String slotName, Object uptoLsn, Integer uptoNchanges, String[] options) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(slotName, uptoLsn, uptoNchanges, options)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static PgLogicalSlotGetChanges PG_LOGICAL_SLOT_GET_CHANGES(String slotName, Object uptoLsn, Integer uptoNchanges, String[] options) {
        return jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(slotName, uptoLsn, uptoNchanges, options);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static PgLogicalSlotGetChanges PG_LOGICAL_SLOT_GET_CHANGES(Field<String> slotName, Field<Object> uptoLsn, Field<Integer> uptoNchanges, Field<String[]> options) {
        return jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotGetChanges.PG_LOGICAL_SLOT_GET_CHANGES.call(slotName, uptoLsn, uptoNchanges, options);
    }

    /**
     * The table <code>pg_catalog.pg_logical_slot_peek_binary_changes</code>.
     */
    public static final PgLogicalSlotPeekBinaryChanges PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES = jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<PgLogicalSlotPeekBinaryChangesRecord> PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES(Configuration configuration, String slotName, Object uptoLsn, Integer uptoNchanges, String[] options) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(slotName, uptoLsn, uptoNchanges, options)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static PgLogicalSlotPeekBinaryChanges PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES(String slotName, Object uptoLsn, Integer uptoNchanges, String[] options) {
        return jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(slotName, uptoLsn, uptoNchanges, options);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static PgLogicalSlotPeekBinaryChanges PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES(Field<String> slotName, Field<Object> uptoLsn, Field<Integer> uptoNchanges, Field<String[]> options) {
        return jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotPeekBinaryChanges.PG_LOGICAL_SLOT_PEEK_BINARY_CHANGES.call(slotName, uptoLsn, uptoNchanges, options);
    }

    /**
     * The table <code>pg_catalog.pg_logical_slot_peek_changes</code>.
     */
    public static final PgLogicalSlotPeekChanges PG_LOGICAL_SLOT_PEEK_CHANGES = jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<PgLogicalSlotPeekChangesRecord> PG_LOGICAL_SLOT_PEEK_CHANGES(Configuration configuration, String slotName, Object uptoLsn, Integer uptoNchanges, String[] options) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(slotName, uptoLsn, uptoNchanges, options)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static PgLogicalSlotPeekChanges PG_LOGICAL_SLOT_PEEK_CHANGES(String slotName, Object uptoLsn, Integer uptoNchanges, String[] options) {
        return jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(slotName, uptoLsn, uptoNchanges, options);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static PgLogicalSlotPeekChanges PG_LOGICAL_SLOT_PEEK_CHANGES(Field<String> slotName, Field<Object> uptoLsn, Field<Integer> uptoNchanges, Field<String[]> options) {
        return jooq.postgresql.gen.pg_catalog.tables.PgLogicalSlotPeekChanges.PG_LOGICAL_SLOT_PEEK_CHANGES.call(slotName, uptoLsn, uptoNchanges, options);
    }

    /**
     * The table <code>pg_catalog.pg_ls_dir</code>.
     */
    public static final PgLsDir PG_LS_DIR = jooq.postgresql.gen.pg_catalog.tables.PgLsDir.PG_LS_DIR;

    /**
     * Call <code>pg_catalog.pg_ls_dir</code>.
     */
    public static Result<PgLsDirRecord> PG_LS_DIR(Configuration configuration, String __1) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgLsDir.PG_LS_DIR.call(__1)).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_ls_dir</code> as a table.
     */
    public static PgLsDir PG_LS_DIR(String __1) {
        return jooq.postgresql.gen.pg_catalog.tables.PgLsDir.PG_LS_DIR.call(__1);
    }

    /**
     * Get <code>pg_catalog.pg_ls_dir</code> as a table.
     */
    public static PgLsDir PG_LS_DIR(Field<String> __1) {
        return jooq.postgresql.gen.pg_catalog.tables.PgLsDir.PG_LS_DIR.call(__1);
    }

    /**
     * The table <code>pg_catalog.pg_matviews</code>.
     */
    public static final PgMatviews PG_MATVIEWS = jooq.postgresql.gen.pg_catalog.tables.PgMatviews.PG_MATVIEWS;

    /**
     * The table <code>pg_catalog.pg_namespace</code>.
     */
    public static final PgNamespace PG_NAMESPACE = jooq.postgresql.gen.pg_catalog.tables.PgNamespace.PG_NAMESPACE;

    /**
     * The table <code>pg_catalog.pg_opclass</code>.
     */
    public static final PgOpclass PG_OPCLASS = jooq.postgresql.gen.pg_catalog.tables.PgOpclass.PG_OPCLASS;

    /**
     * The table <code>pg_catalog.pg_operator</code>.
     */
    public static final PgOperator PG_OPERATOR = jooq.postgresql.gen.pg_catalog.tables.PgOperator.PG_OPERATOR;

    /**
     * The table <code>pg_catalog.pg_opfamily</code>.
     */
    public static final PgOpfamily PG_OPFAMILY = jooq.postgresql.gen.pg_catalog.tables.PgOpfamily.PG_OPFAMILY;

    /**
     * The table <code>pg_catalog.pg_options_to_table</code>.
     */
    public static final PgOptionsToTable PG_OPTIONS_TO_TABLE = jooq.postgresql.gen.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE;

    /**
     * Call <code>pg_catalog.pg_options_to_table</code>.
     */
    public static Result<PgOptionsToTableRecord> PG_OPTIONS_TO_TABLE(Configuration configuration, String[] optionsArray) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(optionsArray)).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_options_to_table</code> as a table.
     */
    public static PgOptionsToTable PG_OPTIONS_TO_TABLE(String[] optionsArray) {
        return jooq.postgresql.gen.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(optionsArray);
    }

    /**
     * Get <code>pg_catalog.pg_options_to_table</code> as a table.
     */
    public static PgOptionsToTable PG_OPTIONS_TO_TABLE(Field<String[]> optionsArray) {
        return jooq.postgresql.gen.pg_catalog.tables.PgOptionsToTable.PG_OPTIONS_TO_TABLE.call(optionsArray);
    }

    /**
     * The table <code>pg_catalog.pg_partitioned_table</code>.
     */
    public static final PgPartitionedTable PG_PARTITIONED_TABLE = jooq.postgresql.gen.pg_catalog.tables.PgPartitionedTable.PG_PARTITIONED_TABLE;

    /**
     * The table <code>pg_catalog.pg_pltemplate</code>.
     */
    public static final PgPltemplate PG_PLTEMPLATE = jooq.postgresql.gen.pg_catalog.tables.PgPltemplate.PG_PLTEMPLATE;

    /**
     * The table <code>pg_catalog.pg_policies</code>.
     */
    public static final PgPolicies PG_POLICIES = jooq.postgresql.gen.pg_catalog.tables.PgPolicies.PG_POLICIES;

    /**
     * The table <code>pg_catalog.pg_policy</code>.
     */
    public static final PgPolicy PG_POLICY = jooq.postgresql.gen.pg_catalog.tables.PgPolicy.PG_POLICY;

    /**
     * The table <code>pg_catalog.pg_prepared_statement</code>.
     */
    public static final PgPreparedStatement PG_PREPARED_STATEMENT = jooq.postgresql.gen.pg_catalog.tables.PgPreparedStatement.PG_PREPARED_STATEMENT;

    /**
     * Call <code>pg_catalog.pg_prepared_statement</code>.
     */
    public static Result<PgPreparedStatementRecord> PG_PREPARED_STATEMENT(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgPreparedStatement.PG_PREPARED_STATEMENT.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_prepared_statement</code> as a table.
     */
    public static PgPreparedStatement PG_PREPARED_STATEMENT() {
        return jooq.postgresql.gen.pg_catalog.tables.PgPreparedStatement.PG_PREPARED_STATEMENT.call();
    }

    /**
     * The table <code>pg_catalog.pg_prepared_statements</code>.
     */
    public static final PgPreparedStatements PG_PREPARED_STATEMENTS = jooq.postgresql.gen.pg_catalog.tables.PgPreparedStatements.PG_PREPARED_STATEMENTS;

    /**
     * The table <code>pg_catalog.pg_prepared_xact</code>.
     */
    public static final PgPreparedXact PG_PREPARED_XACT = jooq.postgresql.gen.pg_catalog.tables.PgPreparedXact.PG_PREPARED_XACT;

    /**
     * Call <code>pg_catalog.pg_prepared_xact</code>.
     */
    public static Result<PgPreparedXactRecord> PG_PREPARED_XACT(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgPreparedXact.PG_PREPARED_XACT.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_prepared_xact</code> as a table.
     */
    public static PgPreparedXact PG_PREPARED_XACT() {
        return jooq.postgresql.gen.pg_catalog.tables.PgPreparedXact.PG_PREPARED_XACT.call();
    }

    /**
     * The table <code>pg_catalog.pg_prepared_xacts</code>.
     */
    public static final PgPreparedXacts PG_PREPARED_XACTS = jooq.postgresql.gen.pg_catalog.tables.PgPreparedXacts.PG_PREPARED_XACTS;

    /**
     * The table <code>pg_catalog.pg_proc</code>.
     */
    public static final PgProc PG_PROC = jooq.postgresql.gen.pg_catalog.tables.PgProc.PG_PROC;

    /**
     * The table <code>pg_catalog.pg_publication</code>.
     */
    public static final PgPublication PG_PUBLICATION = jooq.postgresql.gen.pg_catalog.tables.PgPublication.PG_PUBLICATION;

    /**
     * The table <code>pg_catalog.pg_publication_rel</code>.
     */
    public static final PgPublicationRel PG_PUBLICATION_REL = jooq.postgresql.gen.pg_catalog.tables.PgPublicationRel.PG_PUBLICATION_REL;

    /**
     * The table <code>pg_catalog.pg_publication_tables</code>.
     */
    public static final PgPublicationTables PG_PUBLICATION_TABLES = jooq.postgresql.gen.pg_catalog.tables.PgPublicationTables.PG_PUBLICATION_TABLES;

    /**
     * The table <code>pg_catalog.pg_range</code>.
     */
    public static final PgRange PG_RANGE = jooq.postgresql.gen.pg_catalog.tables.PgRange.PG_RANGE;

    /**
     * The table <code>pg_catalog.pg_replication_origin</code>.
     */
    public static final PgReplicationOrigin PG_REPLICATION_ORIGIN = jooq.postgresql.gen.pg_catalog.tables.PgReplicationOrigin.PG_REPLICATION_ORIGIN;

    /**
     * The table <code>pg_catalog.pg_replication_slots</code>.
     */
    public static final PgReplicationSlots PG_REPLICATION_SLOTS = jooq.postgresql.gen.pg_catalog.tables.PgReplicationSlots.PG_REPLICATION_SLOTS;

    /**
     * The table <code>pg_catalog.pg_rewrite</code>.
     */
    public static final PgRewrite PG_REWRITE = jooq.postgresql.gen.pg_catalog.tables.PgRewrite.PG_REWRITE;

    /**
     * The table <code>pg_catalog.pg_roles</code>.
     */
    public static final PgRoles PG_ROLES = jooq.postgresql.gen.pg_catalog.tables.PgRoles.PG_ROLES;

    /**
     * The table <code>pg_catalog.pg_rules</code>.
     */
    public static final PgRules PG_RULES = jooq.postgresql.gen.pg_catalog.tables.PgRules.PG_RULES;

    /**
     * The table <code>pg_catalog.pg_seclabel</code>.
     */
    public static final PgSeclabel PG_SECLABEL = jooq.postgresql.gen.pg_catalog.tables.PgSeclabel.PG_SECLABEL;

    /**
     * The table <code>pg_catalog.pg_seclabels</code>.
     */
    public static final PgSeclabels PG_SECLABELS = jooq.postgresql.gen.pg_catalog.tables.PgSeclabels.PG_SECLABELS;

    /**
     * The table <code>pg_catalog.pg_sequence</code>.
     */
    public static final PgSequence PG_SEQUENCE = jooq.postgresql.gen.pg_catalog.tables.PgSequence.PG_SEQUENCE;

    /**
     * The table <code>pg_catalog.pg_sequences</code>.
     */
    public static final PgSequences PG_SEQUENCES = jooq.postgresql.gen.pg_catalog.tables.PgSequences.PG_SEQUENCES;

    /**
     * The table <code>pg_catalog.pg_settings</code>.
     */
    public static final PgSettings PG_SETTINGS = jooq.postgresql.gen.pg_catalog.tables.PgSettings.PG_SETTINGS;

    /**
     * The table <code>pg_catalog.pg_shdepend</code>.
     */
    public static final PgShdepend PG_SHDEPEND = jooq.postgresql.gen.pg_catalog.tables.PgShdepend.PG_SHDEPEND;

    /**
     * The table <code>pg_catalog.pg_shdescription</code>.
     */
    public static final PgShdescription PG_SHDESCRIPTION = jooq.postgresql.gen.pg_catalog.tables.PgShdescription.PG_SHDESCRIPTION;

    /**
     * The table <code>pg_catalog.pg_show_all_settings</code>.
     */
    public static final PgShowAllSettings PG_SHOW_ALL_SETTINGS = jooq.postgresql.gen.pg_catalog.tables.PgShowAllSettings.PG_SHOW_ALL_SETTINGS;

    /**
     * Call <code>pg_catalog.pg_show_all_settings</code>.
     */
    public static Result<PgShowAllSettingsRecord> PG_SHOW_ALL_SETTINGS(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgShowAllSettings.PG_SHOW_ALL_SETTINGS.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_show_all_settings</code> as a table.
     */
    public static PgShowAllSettings PG_SHOW_ALL_SETTINGS() {
        return jooq.postgresql.gen.pg_catalog.tables.PgShowAllSettings.PG_SHOW_ALL_SETTINGS.call();
    }

    /**
     * The table <code>pg_catalog.pg_show_replication_origin_status</code>.
     */
    public static final PgShowReplicationOriginStatus PG_SHOW_REPLICATION_ORIGIN_STATUS = jooq.postgresql.gen.pg_catalog.tables.PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS;

    /**
     * Call <code>pg_catalog.pg_show_replication_origin_status</code>.
     */
    public static Result<PgShowReplicationOriginStatusRecord> PG_SHOW_REPLICATION_ORIGIN_STATUS(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_show_replication_origin_status</code> as a table.
     */
    public static PgShowReplicationOriginStatus PG_SHOW_REPLICATION_ORIGIN_STATUS() {
        return jooq.postgresql.gen.pg_catalog.tables.PgShowReplicationOriginStatus.PG_SHOW_REPLICATION_ORIGIN_STATUS.call();
    }

    /**
     * The table <code>pg_catalog.pg_shseclabel</code>.
     */
    public static final PgShseclabel PG_SHSECLABEL = jooq.postgresql.gen.pg_catalog.tables.PgShseclabel.PG_SHSECLABEL;

    /**
     * The table <code>pg_catalog.pg_stat_activity</code>.
     */
    public static final PgStatActivity PG_STAT_ACTIVITY = jooq.postgresql.gen.pg_catalog.tables.PgStatActivity.PG_STAT_ACTIVITY;

    /**
     * The table <code>pg_catalog.pg_stat_all_indexes</code>.
     */
    public static final PgStatAllIndexes PG_STAT_ALL_INDEXES = jooq.postgresql.gen.pg_catalog.tables.PgStatAllIndexes.PG_STAT_ALL_INDEXES;

    /**
     * The table <code>pg_catalog.pg_stat_all_tables</code>.
     */
    public static final PgStatAllTables PG_STAT_ALL_TABLES = jooq.postgresql.gen.pg_catalog.tables.PgStatAllTables.PG_STAT_ALL_TABLES;

    /**
     * The table <code>pg_catalog.pg_stat_archiver</code>.
     */
    public static final PgStatArchiver PG_STAT_ARCHIVER = jooq.postgresql.gen.pg_catalog.tables.PgStatArchiver.PG_STAT_ARCHIVER;

    /**
     * The table <code>pg_catalog.pg_stat_bgwriter</code>.
     */
    public static final PgStatBgwriter PG_STAT_BGWRITER = jooq.postgresql.gen.pg_catalog.tables.PgStatBgwriter.PG_STAT_BGWRITER;

    /**
     * The table <code>pg_catalog.pg_stat_database</code>.
     */
    public static final PgStatDatabase PG_STAT_DATABASE = jooq.postgresql.gen.pg_catalog.tables.PgStatDatabase.PG_STAT_DATABASE;

    /**
     * The table <code>pg_catalog.pg_stat_database_conflicts</code>.
     */
    public static final PgStatDatabaseConflicts PG_STAT_DATABASE_CONFLICTS = jooq.postgresql.gen.pg_catalog.tables.PgStatDatabaseConflicts.PG_STAT_DATABASE_CONFLICTS;

    /**
     * The table <code>pg_catalog.pg_stat_get_activity</code>.
     */
    public static final PgStatGetActivity PG_STAT_GET_ACTIVITY = jooq.postgresql.gen.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY;

    /**
     * Call <code>pg_catalog.pg_stat_get_activity</code>.
     */
    public static Result<PgStatGetActivityRecord> PG_STAT_GET_ACTIVITY(Configuration configuration, Integer pid) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(pid)).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_activity</code> as a table.
     */
    public static PgStatGetActivity PG_STAT_GET_ACTIVITY(Integer pid) {
        return jooq.postgresql.gen.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(pid);
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_activity</code> as a table.
     */
    public static PgStatGetActivity PG_STAT_GET_ACTIVITY(Field<Integer> pid) {
        return jooq.postgresql.gen.pg_catalog.tables.PgStatGetActivity.PG_STAT_GET_ACTIVITY.call(pid);
    }

    /**
     * The table <code>pg_catalog.pg_stat_get_backend_idset</code>.
     */
    public static final PgStatGetBackendIdset PG_STAT_GET_BACKEND_IDSET = jooq.postgresql.gen.pg_catalog.tables.PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET;

    /**
     * Call <code>pg_catalog.pg_stat_get_backend_idset</code>.
     */
    public static Result<PgStatGetBackendIdsetRecord> PG_STAT_GET_BACKEND_IDSET(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_backend_idset</code> as a table.
     */
    public static PgStatGetBackendIdset PG_STAT_GET_BACKEND_IDSET() {
        return jooq.postgresql.gen.pg_catalog.tables.PgStatGetBackendIdset.PG_STAT_GET_BACKEND_IDSET.call();
    }

    /**
     * The table <code>pg_catalog.pg_stat_get_progress_info</code>.
     */
    public static final PgStatGetProgressInfo PG_STAT_GET_PROGRESS_INFO = jooq.postgresql.gen.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO;

    /**
     * Call <code>pg_catalog.pg_stat_get_progress_info</code>.
     */
    public static Result<PgStatGetProgressInfoRecord> PG_STAT_GET_PROGRESS_INFO(Configuration configuration, String cmdtype) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(cmdtype)).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_progress_info</code> as a table.
     */
    public static PgStatGetProgressInfo PG_STAT_GET_PROGRESS_INFO(String cmdtype) {
        return jooq.postgresql.gen.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(cmdtype);
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_progress_info</code> as a table.
     */
    public static PgStatGetProgressInfo PG_STAT_GET_PROGRESS_INFO(Field<String> cmdtype) {
        return jooq.postgresql.gen.pg_catalog.tables.PgStatGetProgressInfo.PG_STAT_GET_PROGRESS_INFO.call(cmdtype);
    }

    /**
     * The table <code>pg_catalog.pg_stat_get_wal_senders</code>.
     */
    public static final PgStatGetWalSenders PG_STAT_GET_WAL_SENDERS = jooq.postgresql.gen.pg_catalog.tables.PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS;

    /**
     * Call <code>pg_catalog.pg_stat_get_wal_senders</code>.
     */
    public static Result<PgStatGetWalSendersRecord> PG_STAT_GET_WAL_SENDERS(Configuration configuration) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS.call()).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_stat_get_wal_senders</code> as a table.
     */
    public static PgStatGetWalSenders PG_STAT_GET_WAL_SENDERS() {
        return jooq.postgresql.gen.pg_catalog.tables.PgStatGetWalSenders.PG_STAT_GET_WAL_SENDERS.call();
    }

    /**
     * The table <code>pg_catalog.pg_stat_progress_vacuum</code>.
     */
    public static final PgStatProgressVacuum PG_STAT_PROGRESS_VACUUM = jooq.postgresql.gen.pg_catalog.tables.PgStatProgressVacuum.PG_STAT_PROGRESS_VACUUM;

    /**
     * The table <code>pg_catalog.pg_stat_replication</code>.
     */
    public static final PgStatReplication PG_STAT_REPLICATION = jooq.postgresql.gen.pg_catalog.tables.PgStatReplication.PG_STAT_REPLICATION;

    /**
     * The table <code>pg_catalog.pg_stat_ssl</code>.
     */
    public static final PgStatSsl PG_STAT_SSL = jooq.postgresql.gen.pg_catalog.tables.PgStatSsl.PG_STAT_SSL;

    /**
     * The table <code>pg_catalog.pg_stat_subscription</code>.
     */
    public static final PgStatSubscription PG_STAT_SUBSCRIPTION = jooq.postgresql.gen.pg_catalog.tables.PgStatSubscription.PG_STAT_SUBSCRIPTION;

    /**
     * The table <code>pg_catalog.pg_stat_sys_indexes</code>.
     */
    public static final PgStatSysIndexes PG_STAT_SYS_INDEXES = jooq.postgresql.gen.pg_catalog.tables.PgStatSysIndexes.PG_STAT_SYS_INDEXES;

    /**
     * The table <code>pg_catalog.pg_stat_sys_tables</code>.
     */
    public static final PgStatSysTables PG_STAT_SYS_TABLES = jooq.postgresql.gen.pg_catalog.tables.PgStatSysTables.PG_STAT_SYS_TABLES;

    /**
     * The table <code>pg_catalog.pg_stat_user_functions</code>.
     */
    public static final PgStatUserFunctions PG_STAT_USER_FUNCTIONS = jooq.postgresql.gen.pg_catalog.tables.PgStatUserFunctions.PG_STAT_USER_FUNCTIONS;

    /**
     * The table <code>pg_catalog.pg_stat_user_indexes</code>.
     */
    public static final PgStatUserIndexes PG_STAT_USER_INDEXES = jooq.postgresql.gen.pg_catalog.tables.PgStatUserIndexes.PG_STAT_USER_INDEXES;

    /**
     * The table <code>pg_catalog.pg_stat_user_tables</code>.
     */
    public static final PgStatUserTables PG_STAT_USER_TABLES = jooq.postgresql.gen.pg_catalog.tables.PgStatUserTables.PG_STAT_USER_TABLES;

    /**
     * The table <code>pg_catalog.pg_stat_wal_receiver</code>.
     */
    public static final PgStatWalReceiver PG_STAT_WAL_RECEIVER = jooq.postgresql.gen.pg_catalog.tables.PgStatWalReceiver.PG_STAT_WAL_RECEIVER;

    /**
     * The table <code>pg_catalog.pg_stat_xact_all_tables</code>.
     */
    public static final PgStatXactAllTables PG_STAT_XACT_ALL_TABLES = jooq.postgresql.gen.pg_catalog.tables.PgStatXactAllTables.PG_STAT_XACT_ALL_TABLES;

    /**
     * The table <code>pg_catalog.pg_stat_xact_sys_tables</code>.
     */
    public static final PgStatXactSysTables PG_STAT_XACT_SYS_TABLES = jooq.postgresql.gen.pg_catalog.tables.PgStatXactSysTables.PG_STAT_XACT_SYS_TABLES;

    /**
     * The table <code>pg_catalog.pg_stat_xact_user_functions</code>.
     */
    public static final PgStatXactUserFunctions PG_STAT_XACT_USER_FUNCTIONS = jooq.postgresql.gen.pg_catalog.tables.PgStatXactUserFunctions.PG_STAT_XACT_USER_FUNCTIONS;

    /**
     * The table <code>pg_catalog.pg_stat_xact_user_tables</code>.
     */
    public static final PgStatXactUserTables PG_STAT_XACT_USER_TABLES = jooq.postgresql.gen.pg_catalog.tables.PgStatXactUserTables.PG_STAT_XACT_USER_TABLES;

    /**
     * The table <code>pg_catalog.pg_statio_all_indexes</code>.
     */
    public static final PgStatioAllIndexes PG_STATIO_ALL_INDEXES = jooq.postgresql.gen.pg_catalog.tables.PgStatioAllIndexes.PG_STATIO_ALL_INDEXES;

    /**
     * The table <code>pg_catalog.pg_statio_all_sequences</code>.
     */
    public static final PgStatioAllSequences PG_STATIO_ALL_SEQUENCES = jooq.postgresql.gen.pg_catalog.tables.PgStatioAllSequences.PG_STATIO_ALL_SEQUENCES;

    /**
     * The table <code>pg_catalog.pg_statio_all_tables</code>.
     */
    public static final PgStatioAllTables PG_STATIO_ALL_TABLES = jooq.postgresql.gen.pg_catalog.tables.PgStatioAllTables.PG_STATIO_ALL_TABLES;

    /**
     * The table <code>pg_catalog.pg_statio_sys_indexes</code>.
     */
    public static final PgStatioSysIndexes PG_STATIO_SYS_INDEXES = jooq.postgresql.gen.pg_catalog.tables.PgStatioSysIndexes.PG_STATIO_SYS_INDEXES;

    /**
     * The table <code>pg_catalog.pg_statio_sys_sequences</code>.
     */
    public static final PgStatioSysSequences PG_STATIO_SYS_SEQUENCES = jooq.postgresql.gen.pg_catalog.tables.PgStatioSysSequences.PG_STATIO_SYS_SEQUENCES;

    /**
     * The table <code>pg_catalog.pg_statio_sys_tables</code>.
     */
    public static final PgStatioSysTables PG_STATIO_SYS_TABLES = jooq.postgresql.gen.pg_catalog.tables.PgStatioSysTables.PG_STATIO_SYS_TABLES;

    /**
     * The table <code>pg_catalog.pg_statio_user_indexes</code>.
     */
    public static final PgStatioUserIndexes PG_STATIO_USER_INDEXES = jooq.postgresql.gen.pg_catalog.tables.PgStatioUserIndexes.PG_STATIO_USER_INDEXES;

    /**
     * The table <code>pg_catalog.pg_statio_user_sequences</code>.
     */
    public static final PgStatioUserSequences PG_STATIO_USER_SEQUENCES = jooq.postgresql.gen.pg_catalog.tables.PgStatioUserSequences.PG_STATIO_USER_SEQUENCES;

    /**
     * The table <code>pg_catalog.pg_statio_user_tables</code>.
     */
    public static final PgStatioUserTables PG_STATIO_USER_TABLES = jooq.postgresql.gen.pg_catalog.tables.PgStatioUserTables.PG_STATIO_USER_TABLES;

    /**
     * The table <code>pg_catalog.pg_statistic_ext</code>.
     */
    public static final PgStatisticExt PG_STATISTIC_EXT = jooq.postgresql.gen.pg_catalog.tables.PgStatisticExt.PG_STATISTIC_EXT;

    /**
     * The table <code>pg_catalog.pg_stats</code>.
     */
    public static final PgStats PG_STATS = jooq.postgresql.gen.pg_catalog.tables.PgStats.PG_STATS;

    /**
     * The table <code>pg_catalog.pg_subscription</code>.
     */
    public static final PgSubscription PG_SUBSCRIPTION = jooq.postgresql.gen.pg_catalog.tables.PgSubscription.PG_SUBSCRIPTION;

    /**
     * The table <code>pg_catalog.pg_subscription_rel</code>.
     */
    public static final PgSubscriptionRel PG_SUBSCRIPTION_REL = jooq.postgresql.gen.pg_catalog.tables.PgSubscriptionRel.PG_SUBSCRIPTION_REL;

    /**
     * The table <code>pg_catalog.pg_tables</code>.
     */
    public static final PgTables PG_TABLES = jooq.postgresql.gen.pg_catalog.tables.PgTables.PG_TABLES;

    /**
     * The table <code>pg_catalog.pg_tablespace</code>.
     */
    public static final PgTablespace PG_TABLESPACE = jooq.postgresql.gen.pg_catalog.tables.PgTablespace.PG_TABLESPACE;

    /**
     * The table <code>pg_catalog.pg_tablespace_databases</code>.
     */
    public static final PgTablespaceDatabases PG_TABLESPACE_DATABASES = jooq.postgresql.gen.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES;

    /**
     * Call <code>pg_catalog.pg_tablespace_databases</code>.
     */
    public static Result<PgTablespaceDatabasesRecord> PG_TABLESPACE_DATABASES(Configuration configuration, Long __1) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(__1)).fetch();
    }

    /**
     * Get <code>pg_catalog.pg_tablespace_databases</code> as a table.
     */
    public static PgTablespaceDatabases PG_TABLESPACE_DATABASES(Long __1) {
        return jooq.postgresql.gen.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(__1);
    }

    /**
     * Get <code>pg_catalog.pg_tablespace_databases</code> as a table.
     */
    public static PgTablespaceDatabases PG_TABLESPACE_DATABASES(Field<Long> __1) {
        return jooq.postgresql.gen.pg_catalog.tables.PgTablespaceDatabases.PG_TABLESPACE_DATABASES.call(__1);
    }

    /**
     * The table <code>pg_catalog.pg_timezone_abbrevs</code>.
     */
    public static final PgTimezoneAbbrevs PG_TIMEZONE_ABBREVS = jooq.postgresql.gen.pg_catalog.tables.PgTimezoneAbbrevs.PG_TIMEZONE_ABBREVS;

    /**
     * The table <code>pg_catalog.pg_timezone_names</code>.
     */
    public static final PgTimezoneNames PG_TIMEZONE_NAMES = jooq.postgresql.gen.pg_catalog.tables.PgTimezoneNames.PG_TIMEZONE_NAMES;

    /**
     * The table <code>pg_catalog.pg_transform</code>.
     */
    public static final PgTransform PG_TRANSFORM = jooq.postgresql.gen.pg_catalog.tables.PgTransform.PG_TRANSFORM;

    /**
     * The table <code>pg_catalog.pg_trigger</code>.
     */
    public static final PgTrigger PG_TRIGGER = jooq.postgresql.gen.pg_catalog.tables.PgTrigger.PG_TRIGGER;

    /**
     * The table <code>pg_catalog.pg_ts_config</code>.
     */
    public static final PgTsConfig PG_TS_CONFIG = jooq.postgresql.gen.pg_catalog.tables.PgTsConfig.PG_TS_CONFIG;

    /**
     * The table <code>pg_catalog.pg_ts_config_map</code>.
     */
    public static final PgTsConfigMap PG_TS_CONFIG_MAP = jooq.postgresql.gen.pg_catalog.tables.PgTsConfigMap.PG_TS_CONFIG_MAP;

    /**
     * The table <code>pg_catalog.pg_ts_dict</code>.
     */
    public static final PgTsDict PG_TS_DICT = jooq.postgresql.gen.pg_catalog.tables.PgTsDict.PG_TS_DICT;

    /**
     * The table <code>pg_catalog.pg_ts_parser</code>.
     */
    public static final PgTsParser PG_TS_PARSER = jooq.postgresql.gen.pg_catalog.tables.PgTsParser.PG_TS_PARSER;

    /**
     * The table <code>pg_catalog.pg_ts_template</code>.
     */
    public static final PgTsTemplate PG_TS_TEMPLATE = jooq.postgresql.gen.pg_catalog.tables.PgTsTemplate.PG_TS_TEMPLATE;

    /**
     * The table <code>pg_catalog.pg_type</code>.
     */
    public static final PgType PG_TYPE = jooq.postgresql.gen.pg_catalog.tables.PgType.PG_TYPE;

    /**
     * The table <code>pg_catalog.pg_user</code>.
     */
    public static final PgUser PG_USER = jooq.postgresql.gen.pg_catalog.tables.PgUser.PG_USER;

    /**
     * The table <code>pg_catalog.pg_user_mappings</code>.
     */
    public static final PgUserMappings PG_USER_MAPPINGS = jooq.postgresql.gen.pg_catalog.tables.PgUserMappings.PG_USER_MAPPINGS;

    /**
     * The table <code>pg_catalog.pg_views</code>.
     */
    public static final PgViews PG_VIEWS = jooq.postgresql.gen.pg_catalog.tables.PgViews.PG_VIEWS;

    /**
     * The table <code>pg_catalog.regexp_matches</code>.
     */
    public static final RegexpMatches REGEXP_MATCHES = jooq.postgresql.gen.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES;

    /**
     * Call <code>pg_catalog.regexp_matches</code>.
     */
    public static Result<RegexpMatchesRecord> REGEXP_MATCHES(Configuration configuration, String __1, String __2) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(__1, __2)).fetch();
    }

    /**
     * Get <code>pg_catalog.regexp_matches</code> as a table.
     */
    public static RegexpMatches REGEXP_MATCHES(String __1, String __2) {
        return jooq.postgresql.gen.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(__1, __2);
    }

    /**
     * Get <code>pg_catalog.regexp_matches</code> as a table.
     */
    public static RegexpMatches REGEXP_MATCHES(Field<String> __1, Field<String> __2) {
        return jooq.postgresql.gen.pg_catalog.tables.RegexpMatches.REGEXP_MATCHES.call(__1, __2);
    }

    /**
     * The table <code>pg_catalog.regexp_split_to_table</code>.
     */
    public static final RegexpSplitToTable REGEXP_SPLIT_TO_TABLE = jooq.postgresql.gen.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE;

    /**
     * Call <code>pg_catalog.regexp_split_to_table</code>.
     */
    public static Result<RegexpSplitToTableRecord> REGEXP_SPLIT_TO_TABLE(Configuration configuration, String __1, String __2, String __3) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(__1, __2, __3)).fetch();
    }

    /**
     * Get <code>pg_catalog.regexp_split_to_table</code> as a table.
     */
    public static RegexpSplitToTable REGEXP_SPLIT_TO_TABLE(String __1, String __2, String __3) {
        return jooq.postgresql.gen.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(__1, __2, __3);
    }

    /**
     * Get <code>pg_catalog.regexp_split_to_table</code> as a table.
     */
    public static RegexpSplitToTable REGEXP_SPLIT_TO_TABLE(Field<String> __1, Field<String> __2, Field<String> __3) {
        return jooq.postgresql.gen.pg_catalog.tables.RegexpSplitToTable.REGEXP_SPLIT_TO_TABLE.call(__1, __2, __3);
    }

    /**
     * The table <code>pg_catalog.ts_debug</code>.
     */
    public static final TsDebug TS_DEBUG = jooq.postgresql.gen.pg_catalog.tables.TsDebug.TS_DEBUG;

    /**
     * Call <code>pg_catalog.ts_debug</code>.
     */
    public static Result<TsDebugRecord> TS_DEBUG(Configuration configuration, String document) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.TsDebug.TS_DEBUG.call(document)).fetch();
    }

    /**
     * Get <code>pg_catalog.ts_debug</code> as a table.
     */
    public static TsDebug TS_DEBUG(String document) {
        return jooq.postgresql.gen.pg_catalog.tables.TsDebug.TS_DEBUG.call(document);
    }

    /**
     * Get <code>pg_catalog.ts_debug</code> as a table.
     */
    public static TsDebug TS_DEBUG(Field<String> document) {
        return jooq.postgresql.gen.pg_catalog.tables.TsDebug.TS_DEBUG.call(document);
    }

    /**
     * The table <code>pg_catalog.ts_parse</code>.
     */
    public static final TsParse TS_PARSE = jooq.postgresql.gen.pg_catalog.tables.TsParse.TS_PARSE;

    /**
     * Call <code>pg_catalog.ts_parse</code>.
     */
    public static Result<TsParseRecord> TS_PARSE(Configuration configuration, Long parserOid, String txt) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.TsParse.TS_PARSE.call(parserOid, txt)).fetch();
    }

    /**
     * Get <code>pg_catalog.ts_parse</code> as a table.
     */
    public static TsParse TS_PARSE(Long parserOid, String txt) {
        return jooq.postgresql.gen.pg_catalog.tables.TsParse.TS_PARSE.call(parserOid, txt);
    }

    /**
     * Get <code>pg_catalog.ts_parse</code> as a table.
     */
    public static TsParse TS_PARSE(Field<Long> parserOid, Field<String> txt) {
        return jooq.postgresql.gen.pg_catalog.tables.TsParse.TS_PARSE.call(parserOid, txt);
    }

    /**
     * The table <code>pg_catalog.ts_stat</code>.
     */
    public static final TsStat TS_STAT = jooq.postgresql.gen.pg_catalog.tables.TsStat.TS_STAT;

    /**
     * Call <code>pg_catalog.ts_stat</code>.
     */
    public static Result<TsStatRecord> TS_STAT(Configuration configuration, String query) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.TsStat.TS_STAT.call(query)).fetch();
    }

    /**
     * Get <code>pg_catalog.ts_stat</code> as a table.
     */
    public static TsStat TS_STAT(String query) {
        return jooq.postgresql.gen.pg_catalog.tables.TsStat.TS_STAT.call(query);
    }

    /**
     * Get <code>pg_catalog.ts_stat</code> as a table.
     */
    public static TsStat TS_STAT(Field<String> query) {
        return jooq.postgresql.gen.pg_catalog.tables.TsStat.TS_STAT.call(query);
    }

    /**
     * The table <code>pg_catalog.ts_token_type</code>.
     */
    public static final TsTokenType TS_TOKEN_TYPE = jooq.postgresql.gen.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE;

    /**
     * Call <code>pg_catalog.ts_token_type</code>.
     */
    public static Result<TsTokenTypeRecord> TS_TOKEN_TYPE(Configuration configuration, Long parserOid) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(parserOid)).fetch();
    }

    /**
     * Get <code>pg_catalog.ts_token_type</code> as a table.
     */
    public static TsTokenType TS_TOKEN_TYPE(Long parserOid) {
        return jooq.postgresql.gen.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(parserOid);
    }

    /**
     * Get <code>pg_catalog.ts_token_type</code> as a table.
     */
    public static TsTokenType TS_TOKEN_TYPE(Field<Long> parserOid) {
        return jooq.postgresql.gen.pg_catalog.tables.TsTokenType.TS_TOKEN_TYPE.call(parserOid);
    }

    /**
     * The table <code>pg_catalog.txid_snapshot_xip</code>.
     */
    public static final TxidSnapshotXip TXID_SNAPSHOT_XIP = jooq.postgresql.gen.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<TxidSnapshotXipRecord> TXID_SNAPSHOT_XIP(Configuration configuration, Object __1) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(__1)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static TxidSnapshotXip TXID_SNAPSHOT_XIP(Object __1) {
        return jooq.postgresql.gen.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(__1);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static TxidSnapshotXip TXID_SNAPSHOT_XIP(Field<Object> __1) {
        return jooq.postgresql.gen.pg_catalog.tables.TxidSnapshotXip.TXID_SNAPSHOT_XIP.call(__1);
    }

    /**
     * The table <code>pg_catalog.unnest</code>.
     */
    public static final Unnest UNNEST = jooq.postgresql.gen.pg_catalog.tables.Unnest.UNNEST;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Result<UnnestRecord> UNNEST(Configuration configuration, Object __1) {
        return configuration.dsl().selectFrom(jooq.postgresql.gen.pg_catalog.tables.Unnest.UNNEST.call(__1)).fetch();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Unnest UNNEST(Object __1) {
        return jooq.postgresql.gen.pg_catalog.tables.Unnest.UNNEST.call(__1);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.
     */
    @java.lang.Deprecated
    public static Unnest UNNEST(Field<Object> __1) {
        return jooq.postgresql.gen.pg_catalog.tables.Unnest.UNNEST.call(__1);
    }
}
