/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.pg_catalog.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.pg_catalog.Indexes;
import jooq.postgresql.gen.pg_catalog.PgCatalog;
import jooq.postgresql.gen.pg_catalog.tables.records.PgTsDictRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgTsDict extends TableImpl<PgTsDictRecord> {

    private static final long serialVersionUID = -1118391684;

    /**
     * The reference instance of <code>pg_catalog.pg_ts_dict</code>
     */
    public static final PgTsDict PG_TS_DICT = new PgTsDict();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgTsDictRecord> getRecordType() {
        return PgTsDictRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_ts_dict.dictname</code>.
     */
    public final TableField<PgTsDictRecord, String> DICTNAME = createField("dictname", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_dict.dictnamespace</code>.
     */
    public final TableField<PgTsDictRecord, Long> DICTNAMESPACE = createField("dictnamespace", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_dict.dictowner</code>.
     */
    public final TableField<PgTsDictRecord, Long> DICTOWNER = createField("dictowner", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_dict.dicttemplate</code>.
     */
    public final TableField<PgTsDictRecord, Long> DICTTEMPLATE = createField("dicttemplate", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_dict.dictinitoption</code>.
     */
    public final TableField<PgTsDictRecord, String> DICTINITOPTION = createField("dictinitoption", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>pg_catalog.pg_ts_dict</code> table reference
     */
    public PgTsDict() {
        this(DSL.name("pg_ts_dict"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_dict</code> table reference
     */
    public PgTsDict(String alias) {
        this(DSL.name(alias), PG_TS_DICT);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_dict</code> table reference
     */
    public PgTsDict(Name alias) {
        this(alias, PG_TS_DICT);
    }

    private PgTsDict(Name alias, Table<PgTsDictRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgTsDict(Name alias, Table<PgTsDictRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PgTsDict(Table<O> child, ForeignKey<O, PgTsDictRecord> key) {
        super(child, key, PG_TS_DICT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PG_TS_DICT_DICTNAME_INDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgTsDict as(String alias) {
        return new PgTsDict(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgTsDict as(Name alias) {
        return new PgTsDict(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsDict rename(String name) {
        return new PgTsDict(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsDict rename(Name name) {
        return new PgTsDict(name, null);
    }
}
