/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.pg_catalog.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.pg_catalog.Indexes;
import jooq.postgresql.gen.pg_catalog.PgCatalog;
import jooq.postgresql.gen.pg_catalog.tables.records.PgConversionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgConversion extends TableImpl<PgConversionRecord> {

    private static final long serialVersionUID = -414188988;

    /**
     * The reference instance of <code>pg_catalog.pg_conversion</code>
     */
    public static final PgConversion PG_CONVERSION = new PgConversion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgConversionRecord> getRecordType() {
        return PgConversionRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_conversion.conname</code>.
     */
    public final TableField<PgConversionRecord, String> CONNAME = createField("conname", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_conversion.connamespace</code>.
     */
    public final TableField<PgConversionRecord, Long> CONNAMESPACE = createField("connamespace", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_conversion.conowner</code>.
     */
    public final TableField<PgConversionRecord, Long> CONOWNER = createField("conowner", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_conversion.conforencoding</code>.
     */
    public final TableField<PgConversionRecord, Integer> CONFORENCODING = createField("conforencoding", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_conversion.contoencoding</code>.
     */
    public final TableField<PgConversionRecord, Integer> CONTOENCODING = createField("contoencoding", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_conversion.conproc</code>.
     */
    public final TableField<PgConversionRecord, String> CONPROC = createField("conproc", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_conversion.condefault</code>.
     */
    public final TableField<PgConversionRecord, Boolean> CONDEFAULT = createField("condefault", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>pg_catalog.pg_conversion</code> table reference
     */
    public PgConversion() {
        this(DSL.name("pg_conversion"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_conversion</code> table reference
     */
    public PgConversion(String alias) {
        this(DSL.name(alias), PG_CONVERSION);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_conversion</code> table reference
     */
    public PgConversion(Name alias) {
        this(alias, PG_CONVERSION);
    }

    private PgConversion(Name alias, Table<PgConversionRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgConversion(Name alias, Table<PgConversionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PgConversion(Table<O> child, ForeignKey<O, PgConversionRecord> key) {
        super(child, key, PG_CONVERSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PG_CONVERSION_NAME_NSP_INDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgConversion as(String alias) {
        return new PgConversion(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgConversion as(Name alias) {
        return new PgConversion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgConversion rename(String name) {
        return new PgConversion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgConversion rename(Name name) {
        return new PgConversion(name, null);
    }
}
