/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.pg_catalog.tables;


import javax.annotation.Generated;

import jooq.postgresql.gen.pg_catalog.PgCatalog;
import jooq.postgresql.gen.pg_catalog.tables.records.PgStatSslRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatSsl extends TableImpl<PgStatSslRecord> {

    private static final long serialVersionUID = 2111933506;

    /**
     * The reference instance of <code>pg_catalog.pg_stat_ssl</code>
     */
    public static final PgStatSsl PG_STAT_SSL = new PgStatSsl();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatSslRecord> getRecordType() {
        return PgStatSslRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_stat_ssl.pid</code>.
     */
    public final TableField<PgStatSslRecord, Integer> PID = createField("pid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_ssl.ssl</code>.
     */
    public final TableField<PgStatSslRecord, Boolean> SSL = createField("ssl", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_ssl.version</code>.
     */
    public final TableField<PgStatSslRecord, String> VERSION = createField("version", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_ssl.cipher</code>.
     */
    public final TableField<PgStatSslRecord, String> CIPHER = createField("cipher", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_ssl.bits</code>.
     */
    public final TableField<PgStatSslRecord, Integer> BITS = createField("bits", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_ssl.compression</code>.
     */
    public final TableField<PgStatSslRecord, Boolean> COMPRESSION = createField("compression", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_ssl.clientdn</code>.
     */
    public final TableField<PgStatSslRecord, String> CLIENTDN = createField("clientdn", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>pg_catalog.pg_stat_ssl</code> table reference
     */
    public PgStatSsl() {
        this(DSL.name("pg_stat_ssl"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_ssl</code> table reference
     */
    public PgStatSsl(String alias) {
        this(DSL.name(alias), PG_STAT_SSL);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_ssl</code> table reference
     */
    public PgStatSsl(Name alias) {
        this(alias, PG_STAT_SSL);
    }

    private PgStatSsl(Name alias, Table<PgStatSslRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatSsl(Name alias, Table<PgStatSslRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PgStatSsl(Table<O> child, ForeignKey<O, PgStatSslRecord> key) {
        super(child, key, PG_STAT_SSL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgStatSsl as(String alias) {
        return new PgStatSsl(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgStatSsl as(Name alias) {
        return new PgStatSsl(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatSsl rename(String name) {
        return new PgStatSsl(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatSsl rename(Name name) {
        return new PgStatSsl(name, null);
    }
}
