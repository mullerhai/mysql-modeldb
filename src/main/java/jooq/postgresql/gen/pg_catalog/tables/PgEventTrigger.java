/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.pg_catalog.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.pg_catalog.Indexes;
import jooq.postgresql.gen.pg_catalog.PgCatalog;
import jooq.postgresql.gen.pg_catalog.tables.records.PgEventTriggerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgEventTrigger extends TableImpl<PgEventTriggerRecord> {

    private static final long serialVersionUID = 1716470275;

    /**
     * The reference instance of <code>pg_catalog.pg_event_trigger</code>
     */
    public static final PgEventTrigger PG_EVENT_TRIGGER = new PgEventTrigger();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgEventTriggerRecord> getRecordType() {
        return PgEventTriggerRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_event_trigger.evtname</code>.
     */
    public final TableField<PgEventTriggerRecord, String> EVTNAME = createField("evtname", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_event_trigger.evtevent</code>.
     */
    public final TableField<PgEventTriggerRecord, String> EVTEVENT = createField("evtevent", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_event_trigger.evtowner</code>.
     */
    public final TableField<PgEventTriggerRecord, Long> EVTOWNER = createField("evtowner", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_event_trigger.evtfoid</code>.
     */
    public final TableField<PgEventTriggerRecord, Long> EVTFOID = createField("evtfoid", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_event_trigger.evtenabled</code>.
     */
    public final TableField<PgEventTriggerRecord, String> EVTENABLED = createField("evtenabled", org.jooq.impl.SQLDataType.CHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_event_trigger.evttags</code>.
     */
    public final TableField<PgEventTriggerRecord, String[]> EVTTAGS = createField("evttags", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * Create a <code>pg_catalog.pg_event_trigger</code> table reference
     */
    public PgEventTrigger() {
        this(DSL.name("pg_event_trigger"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_event_trigger</code> table reference
     */
    public PgEventTrigger(String alias) {
        this(DSL.name(alias), PG_EVENT_TRIGGER);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_event_trigger</code> table reference
     */
    public PgEventTrigger(Name alias) {
        this(alias, PG_EVENT_TRIGGER);
    }

    private PgEventTrigger(Name alias, Table<PgEventTriggerRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgEventTrigger(Name alias, Table<PgEventTriggerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PgEventTrigger(Table<O> child, ForeignKey<O, PgEventTriggerRecord> key) {
        super(child, key, PG_EVENT_TRIGGER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PG_EVENT_TRIGGER_EVTNAME_INDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgEventTrigger as(String alias) {
        return new PgEventTrigger(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgEventTrigger as(Name alias) {
        return new PgEventTrigger(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgEventTrigger rename(String name) {
        return new PgEventTrigger(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgEventTrigger rename(Name name) {
        return new PgEventTrigger(name, null);
    }
}
