/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.pg_catalog.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.pg_catalog.Indexes;
import jooq.postgresql.gen.pg_catalog.PgCatalog;
import jooq.postgresql.gen.pg_catalog.tables.records.PgExtensionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgExtension extends TableImpl<PgExtensionRecord> {

    private static final long serialVersionUID = -738977100;

    /**
     * The reference instance of <code>pg_catalog.pg_extension</code>
     */
    public static final PgExtension PG_EXTENSION = new PgExtension();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgExtensionRecord> getRecordType() {
        return PgExtensionRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_extension.extname</code>.
     */
    public final TableField<PgExtensionRecord, String> EXTNAME = createField("extname", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_extension.extowner</code>.
     */
    public final TableField<PgExtensionRecord, Long> EXTOWNER = createField("extowner", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_extension.extnamespace</code>.
     */
    public final TableField<PgExtensionRecord, Long> EXTNAMESPACE = createField("extnamespace", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_extension.extrelocatable</code>.
     */
    public final TableField<PgExtensionRecord, Boolean> EXTRELOCATABLE = createField("extrelocatable", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_extension.extversion</code>.
     */
    public final TableField<PgExtensionRecord, String> EXTVERSION = createField("extversion", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_extension.extconfig</code>.
     */
    public final TableField<PgExtensionRecord, Long[]> EXTCONFIG = createField("extconfig", org.jooq.impl.SQLDataType.BIGINT.getArrayDataType(), this, "");

    /**
     * The column <code>pg_catalog.pg_extension.extcondition</code>.
     */
    public final TableField<PgExtensionRecord, String[]> EXTCONDITION = createField("extcondition", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * Create a <code>pg_catalog.pg_extension</code> table reference
     */
    public PgExtension() {
        this(DSL.name("pg_extension"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_extension</code> table reference
     */
    public PgExtension(String alias) {
        this(DSL.name(alias), PG_EXTENSION);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_extension</code> table reference
     */
    public PgExtension(Name alias) {
        this(alias, PG_EXTENSION);
    }

    private PgExtension(Name alias, Table<PgExtensionRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgExtension(Name alias, Table<PgExtensionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PgExtension(Table<O> child, ForeignKey<O, PgExtensionRecord> key) {
        super(child, key, PG_EXTENSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PG_EXTENSION_NAME_INDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgExtension as(String alias) {
        return new PgExtension(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgExtension as(Name alias) {
        return new PgExtension(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgExtension rename(String name) {
        return new PgExtension(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgExtension rename(Name name) {
        return new PgExtension(name, null);
    }
}
