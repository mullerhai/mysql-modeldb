/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.pg_catalog.tables;


import java.time.OffsetDateTime;

import javax.annotation.Generated;

import jooq.postgresql.gen.pg_catalog.PgCatalog;
import jooq.postgresql.gen.pg_catalog.tables.records.PgStatDatabaseRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatDatabase extends TableImpl<PgStatDatabaseRecord> {

    private static final long serialVersionUID = 1715514123;

    /**
     * The reference instance of <code>pg_catalog.pg_stat_database</code>
     */
    public static final PgStatDatabase PG_STAT_DATABASE = new PgStatDatabase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PgStatDatabaseRecord> getRecordType() {
        return PgStatDatabaseRecord.class;
    }

    /**
     * The column <code>pg_catalog.pg_stat_database.datid</code>.
     */
    public final TableField<PgStatDatabaseRecord, Long> DATID = createField("datid", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.datname</code>.
     */
    public final TableField<PgStatDatabaseRecord, String> DATNAME = createField("datname", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.numbackends</code>.
     */
    public final TableField<PgStatDatabaseRecord, Integer> NUMBACKENDS = createField("numbackends", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.xact_commit</code>.
     */
    public final TableField<PgStatDatabaseRecord, Long> XACT_COMMIT = createField("xact_commit", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.xact_rollback</code>.
     */
    public final TableField<PgStatDatabaseRecord, Long> XACT_ROLLBACK = createField("xact_rollback", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.blks_read</code>.
     */
    public final TableField<PgStatDatabaseRecord, Long> BLKS_READ = createField("blks_read", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.blks_hit</code>.
     */
    public final TableField<PgStatDatabaseRecord, Long> BLKS_HIT = createField("blks_hit", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_returned</code>.
     */
    public final TableField<PgStatDatabaseRecord, Long> TUP_RETURNED = createField("tup_returned", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_fetched</code>.
     */
    public final TableField<PgStatDatabaseRecord, Long> TUP_FETCHED = createField("tup_fetched", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_inserted</code>.
     */
    public final TableField<PgStatDatabaseRecord, Long> TUP_INSERTED = createField("tup_inserted", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_updated</code>.
     */
    public final TableField<PgStatDatabaseRecord, Long> TUP_UPDATED = createField("tup_updated", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_deleted</code>.
     */
    public final TableField<PgStatDatabaseRecord, Long> TUP_DELETED = createField("tup_deleted", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.conflicts</code>.
     */
    public final TableField<PgStatDatabaseRecord, Long> CONFLICTS = createField("conflicts", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.temp_files</code>.
     */
    public final TableField<PgStatDatabaseRecord, Long> TEMP_FILES = createField("temp_files", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.temp_bytes</code>.
     */
    public final TableField<PgStatDatabaseRecord, Long> TEMP_BYTES = createField("temp_bytes", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.deadlocks</code>.
     */
    public final TableField<PgStatDatabaseRecord, Long> DEADLOCKS = createField("deadlocks", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.blk_read_time</code>.
     */
    public final TableField<PgStatDatabaseRecord, Double> BLK_READ_TIME = createField("blk_read_time", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.blk_write_time</code>.
     */
    public final TableField<PgStatDatabaseRecord, Double> BLK_WRITE_TIME = createField("blk_write_time", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pg_catalog.pg_stat_database.stats_reset</code>.
     */
    public final TableField<PgStatDatabaseRecord, OffsetDateTime> STATS_RESET = createField("stats_reset", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * Create a <code>pg_catalog.pg_stat_database</code> table reference
     */
    public PgStatDatabase() {
        this(DSL.name("pg_stat_database"), null);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_database</code> table reference
     */
    public PgStatDatabase(String alias) {
        this(DSL.name(alias), PG_STAT_DATABASE);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_stat_database</code> table reference
     */
    public PgStatDatabase(Name alias) {
        this(alias, PG_STAT_DATABASE);
    }

    private PgStatDatabase(Name alias, Table<PgStatDatabaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private PgStatDatabase(Name alias, Table<PgStatDatabaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PgStatDatabase(Table<O> child, ForeignKey<O, PgStatDatabaseRecord> key) {
        super(child, key, PG_STAT_DATABASE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PgCatalog.PG_CATALOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgStatDatabase as(String alias) {
        return new PgStatDatabase(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PgStatDatabase as(Name alias) {
        return new PgStatDatabase(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatDatabase rename(String name) {
        return new PgStatDatabase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatDatabase rename(Name name) {
        return new PgStatDatabase(name, null);
    }
}
