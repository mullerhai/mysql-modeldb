/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.information_schema.tables;


import javax.annotation.Generated;

import jooq.postgresql.gen.information_schema.InformationSchema;
import jooq.postgresql.gen.information_schema.tables.records.TriggeredUpdateColumnsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TriggeredUpdateColumns extends TableImpl<TriggeredUpdateColumnsRecord> {

    private static final long serialVersionUID = -531073619;

    /**
     * The reference instance of <code>information_schema.triggered_update_columns</code>
     */
    public static final TriggeredUpdateColumns TRIGGERED_UPDATE_COLUMNS = new TriggeredUpdateColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TriggeredUpdateColumnsRecord> getRecordType() {
        return TriggeredUpdateColumnsRecord.class;
    }

    /**
     * The column <code>information_schema.triggered_update_columns.trigger_catalog</code>.
     */
    public final TableField<TriggeredUpdateColumnsRecord, String> TRIGGER_CATALOG = createField("trigger_catalog", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.triggered_update_columns.trigger_schema</code>.
     */
    public final TableField<TriggeredUpdateColumnsRecord, String> TRIGGER_SCHEMA = createField("trigger_schema", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.triggered_update_columns.trigger_name</code>.
     */
    public final TableField<TriggeredUpdateColumnsRecord, String> TRIGGER_NAME = createField("trigger_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.triggered_update_columns.event_object_catalog</code>.
     */
    public final TableField<TriggeredUpdateColumnsRecord, String> EVENT_OBJECT_CATALOG = createField("event_object_catalog", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.triggered_update_columns.event_object_schema</code>.
     */
    public final TableField<TriggeredUpdateColumnsRecord, String> EVENT_OBJECT_SCHEMA = createField("event_object_schema", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.triggered_update_columns.event_object_table</code>.
     */
    public final TableField<TriggeredUpdateColumnsRecord, String> EVENT_OBJECT_TABLE = createField("event_object_table", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.triggered_update_columns.event_object_column</code>.
     */
    public final TableField<TriggeredUpdateColumnsRecord, String> EVENT_OBJECT_COLUMN = createField("event_object_column", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>information_schema.triggered_update_columns</code> table reference
     */
    public TriggeredUpdateColumns() {
        this(DSL.name("triggered_update_columns"), null);
    }

    /**
     * Create an aliased <code>information_schema.triggered_update_columns</code> table reference
     */
    public TriggeredUpdateColumns(String alias) {
        this(DSL.name(alias), TRIGGERED_UPDATE_COLUMNS);
    }

    /**
     * Create an aliased <code>information_schema.triggered_update_columns</code> table reference
     */
    public TriggeredUpdateColumns(Name alias) {
        this(alias, TRIGGERED_UPDATE_COLUMNS);
    }

    private TriggeredUpdateColumns(Name alias, Table<TriggeredUpdateColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TriggeredUpdateColumns(Name alias, Table<TriggeredUpdateColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TriggeredUpdateColumns(Table<O> child, ForeignKey<O, TriggeredUpdateColumnsRecord> key) {
        super(child, key, TRIGGERED_UPDATE_COLUMNS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TriggeredUpdateColumns as(String alias) {
        return new TriggeredUpdateColumns(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TriggeredUpdateColumns as(Name alias) {
        return new TriggeredUpdateColumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TriggeredUpdateColumns rename(String name) {
        return new TriggeredUpdateColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TriggeredUpdateColumns rename(Name name) {
        return new TriggeredUpdateColumns(name, null);
    }
}
