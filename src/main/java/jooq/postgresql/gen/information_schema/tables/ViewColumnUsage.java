/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.information_schema.tables;


import javax.annotation.Generated;

import jooq.postgresql.gen.information_schema.InformationSchema;
import jooq.postgresql.gen.information_schema.tables.records.ViewColumnUsageRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewColumnUsage extends TableImpl<ViewColumnUsageRecord> {

    private static final long serialVersionUID = -728187441;

    /**
     * The reference instance of <code>information_schema.view_column_usage</code>
     */
    public static final ViewColumnUsage VIEW_COLUMN_USAGE = new ViewColumnUsage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewColumnUsageRecord> getRecordType() {
        return ViewColumnUsageRecord.class;
    }

    /**
     * The column <code>information_schema.view_column_usage.view_catalog</code>.
     */
    public final TableField<ViewColumnUsageRecord, String> VIEW_CATALOG = createField("view_catalog", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.view_column_usage.view_schema</code>.
     */
    public final TableField<ViewColumnUsageRecord, String> VIEW_SCHEMA = createField("view_schema", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.view_column_usage.view_name</code>.
     */
    public final TableField<ViewColumnUsageRecord, String> VIEW_NAME = createField("view_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.view_column_usage.table_catalog</code>.
     */
    public final TableField<ViewColumnUsageRecord, String> TABLE_CATALOG = createField("table_catalog", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.view_column_usage.table_schema</code>.
     */
    public final TableField<ViewColumnUsageRecord, String> TABLE_SCHEMA = createField("table_schema", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.view_column_usage.table_name</code>.
     */
    public final TableField<ViewColumnUsageRecord, String> TABLE_NAME = createField("table_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.view_column_usage.column_name</code>.
     */
    public final TableField<ViewColumnUsageRecord, String> COLUMN_NAME = createField("column_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>information_schema.view_column_usage</code> table reference
     */
    public ViewColumnUsage() {
        this(DSL.name("view_column_usage"), null);
    }

    /**
     * Create an aliased <code>information_schema.view_column_usage</code> table reference
     */
    public ViewColumnUsage(String alias) {
        this(DSL.name(alias), VIEW_COLUMN_USAGE);
    }

    /**
     * Create an aliased <code>information_schema.view_column_usage</code> table reference
     */
    public ViewColumnUsage(Name alias) {
        this(alias, VIEW_COLUMN_USAGE);
    }

    private ViewColumnUsage(Name alias, Table<ViewColumnUsageRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewColumnUsage(Name alias, Table<ViewColumnUsageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ViewColumnUsage(Table<O> child, ForeignKey<O, ViewColumnUsageRecord> key) {
        super(child, key, VIEW_COLUMN_USAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewColumnUsage as(String alias) {
        return new ViewColumnUsage(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewColumnUsage as(Name alias) {
        return new ViewColumnUsage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewColumnUsage rename(String name) {
        return new ViewColumnUsage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewColumnUsage rename(Name name) {
        return new ViewColumnUsage(name, null);
    }
}
