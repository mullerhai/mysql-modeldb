/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.public_.Indexes;
import jooq.postgresql.gen.public_.Keys;
import jooq.postgresql.gen.public_.Public;
import jooq.postgresql.gen.public_.tables.records.TreemodelRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Treemodel extends TableImpl<TreemodelRecord> {

    private static final long serialVersionUID = 371437700;

    /**
     * The reference instance of <code>public.treemodel</code>
     */
    public static final Treemodel TREEMODEL = new Treemodel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TreemodelRecord> getRecordType() {
        return TreemodelRecord.class;
    }

    /**
     * The column <code>public.treemodel.id</code>.
     */
    public final TableField<TreemodelRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('treemodel_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.treemodel.model</code>.
     */
    public final TableField<TreemodelRecord, Integer> MODEL = createField("model", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.treemodel.modeltype</code>.
     */
    public final TableField<TreemodelRecord, String> MODELTYPE = createField("modeltype", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.treemodel</code> table reference
     */
    public Treemodel() {
        this(DSL.name("treemodel"), null);
    }

    /**
     * Create an aliased <code>public.treemodel</code> table reference
     */
    public Treemodel(String alias) {
        this(DSL.name(alias), TREEMODEL);
    }

    /**
     * Create an aliased <code>public.treemodel</code> table reference
     */
    public Treemodel(Name alias) {
        this(alias, TREEMODEL);
    }

    private Treemodel(Name alias, Table<TreemodelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Treemodel(Name alias, Table<TreemodelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Treemodel(Table<O> child, ForeignKey<O, TreemodelRecord> key) {
        super(child, key, TREEMODEL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TREEMODEL_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TreemodelRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TREEMODEL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TreemodelRecord> getPrimaryKey() {
        return Keys.TREEMODEL_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TreemodelRecord>> getKeys() {
        return Arrays.<UniqueKey<TreemodelRecord>>asList(Keys.TREEMODEL_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TreemodelRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TreemodelRecord, ?>>asList(Keys.TREEMODEL__TREEMODEL_MODEL_FKEY);
    }

    public Transformer transformer() {
        return new Transformer(this, Keys.TREEMODEL__TREEMODEL_MODEL_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Treemodel as(String alias) {
        return new Treemodel(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Treemodel as(Name alias) {
        return new Treemodel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Treemodel rename(String name) {
        return new Treemodel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Treemodel rename(Name name) {
        return new Treemodel(name, null);
    }
}
