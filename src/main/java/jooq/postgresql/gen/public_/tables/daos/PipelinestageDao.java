/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.public_.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.public_.tables.Pipelinestage;
import jooq.postgresql.gen.public_.tables.records.PipelinestageRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PipelinestageDao extends DAOImpl<PipelinestageRecord, jooq.postgresql.gen.public_.tables.pojos.Pipelinestage, Integer> {

    /**
     * Create a new PipelinestageDao without any configuration
     */
    public PipelinestageDao() {
        super(Pipelinestage.PIPELINESTAGE, jooq.postgresql.gen.public_.tables.pojos.Pipelinestage.class);
    }

    /**
     * Create a new PipelinestageDao with an attached configuration
     */
    public PipelinestageDao(Configuration configuration) {
        super(Pipelinestage.PIPELINESTAGE, jooq.postgresql.gen.public_.tables.pojos.Pipelinestage.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(jooq.postgresql.gen.public_.tables.pojos.Pipelinestage object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<jooq.postgresql.gen.public_.tables.pojos.Pipelinestage> fetchById(Integer... values) {
        return fetch(Pipelinestage.PIPELINESTAGE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public jooq.postgresql.gen.public_.tables.pojos.Pipelinestage fetchOneById(Integer value) {
        return fetchOne(Pipelinestage.PIPELINESTAGE.ID, value);
    }

    /**
     * Fetch records that have <code>pipelinefitevent IN (values)</code>
     */
    public List<jooq.postgresql.gen.public_.tables.pojos.Pipelinestage> fetchByPipelinefitevent(Integer... values) {
        return fetch(Pipelinestage.PIPELINESTAGE.PIPELINEFITEVENT, values);
    }

    /**
     * Fetch records that have <code>transformorfitevent IN (values)</code>
     */
    public List<jooq.postgresql.gen.public_.tables.pojos.Pipelinestage> fetchByTransformorfitevent(Integer... values) {
        return fetch(Pipelinestage.PIPELINESTAGE.TRANSFORMORFITEVENT, values);
    }

    /**
     * Fetch records that have <code>isfit IN (values)</code>
     */
    public List<jooq.postgresql.gen.public_.tables.pojos.Pipelinestage> fetchByIsfit(Integer... values) {
        return fetch(Pipelinestage.PIPELINESTAGE.ISFIT, values);
    }

    /**
     * Fetch records that have <code>stagenumber IN (values)</code>
     */
    public List<jooq.postgresql.gen.public_.tables.pojos.Pipelinestage> fetchByStagenumber(Integer... values) {
        return fetch(Pipelinestage.PIPELINESTAGE.STAGENUMBER, values);
    }

    /**
     * Fetch records that have <code>experimentrun IN (values)</code>
     */
    public List<jooq.postgresql.gen.public_.tables.pojos.Pipelinestage> fetchByExperimentrun(Integer... values) {
        return fetch(Pipelinestage.PIPELINESTAGE.EXPERIMENTRUN, values);
    }
}
