/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.public_.Indexes;
import jooq.postgresql.gen.public_.Keys;
import jooq.postgresql.gen.public_.Public;
import jooq.postgresql.gen.public_.tables.records.ModelobjectivehistoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Modelobjectivehistory extends TableImpl<ModelobjectivehistoryRecord> {

    private static final long serialVersionUID = 1431909748;

    /**
     * The reference instance of <code>public.modelobjectivehistory</code>
     */
    public static final Modelobjectivehistory MODELOBJECTIVEHISTORY = new Modelobjectivehistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelobjectivehistoryRecord> getRecordType() {
        return ModelobjectivehistoryRecord.class;
    }

    /**
     * The column <code>public.modelobjectivehistory.id</code>.
     */
    public final TableField<ModelobjectivehistoryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('modelobjectivehistory_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.modelobjectivehistory.model</code>.
     */
    public final TableField<ModelobjectivehistoryRecord, Integer> MODEL = createField("model", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.modelobjectivehistory.iteration</code>.
     */
    public final TableField<ModelobjectivehistoryRecord, Integer> ITERATION = createField("iteration", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.modelobjectivehistory.objectivevalue</code>.
     */
    public final TableField<ModelobjectivehistoryRecord, Double> OBJECTIVEVALUE = createField("objectivevalue", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * Create a <code>public.modelobjectivehistory</code> table reference
     */
    public Modelobjectivehistory() {
        this(DSL.name("modelobjectivehistory"), null);
    }

    /**
     * Create an aliased <code>public.modelobjectivehistory</code> table reference
     */
    public Modelobjectivehistory(String alias) {
        this(DSL.name(alias), MODELOBJECTIVEHISTORY);
    }

    /**
     * Create an aliased <code>public.modelobjectivehistory</code> table reference
     */
    public Modelobjectivehistory(Name alias) {
        this(alias, MODELOBJECTIVEHISTORY);
    }

    private Modelobjectivehistory(Name alias, Table<ModelobjectivehistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Modelobjectivehistory(Name alias, Table<ModelobjectivehistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Modelobjectivehistory(Table<O> child, ForeignKey<O, ModelobjectivehistoryRecord> key) {
        super(child, key, MODELOBJECTIVEHISTORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MODELOBJECTIVEHISTORY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ModelobjectivehistoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MODELOBJECTIVEHISTORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ModelobjectivehistoryRecord> getPrimaryKey() {
        return Keys.MODELOBJECTIVEHISTORY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ModelobjectivehistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<ModelobjectivehistoryRecord>>asList(Keys.MODELOBJECTIVEHISTORY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ModelobjectivehistoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ModelobjectivehistoryRecord, ?>>asList(Keys.MODELOBJECTIVEHISTORY__MODELOBJECTIVEHISTORY_MODEL_FKEY);
    }

    public Transformer transformer() {
        return new Transformer(this, Keys.MODELOBJECTIVEHISTORY__MODELOBJECTIVEHISTORY_MODEL_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Modelobjectivehistory as(String alias) {
        return new Modelobjectivehistory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Modelobjectivehistory as(Name alias) {
        return new Modelobjectivehistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Modelobjectivehistory rename(String name) {
        return new Modelobjectivehistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Modelobjectivehistory rename(Name name) {
        return new Modelobjectivehistory(name, null);
    }
}
