/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.public_.Indexes;
import jooq.postgresql.gen.public_.Keys;
import jooq.postgresql.gen.public_.Public;
import jooq.postgresql.gen.public_.tables.records.TransformeventRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transformevent extends TableImpl<TransformeventRecord> {

    private static final long serialVersionUID = -332751725;

    /**
     * The reference instance of <code>public.transformevent</code>
     */
    public static final Transformevent TRANSFORMEVENT = new Transformevent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransformeventRecord> getRecordType() {
        return TransformeventRecord.class;
    }

    /**
     * The column <code>public.transformevent.id</code>.
     */
    public final TableField<TransformeventRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('transformevent_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.transformevent.olddf</code>.
     */
    public final TableField<TransformeventRecord, Integer> OLDDF = createField("olddf", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.transformevent.newdf</code>.
     */
    public final TableField<TransformeventRecord, Integer> NEWDF = createField("newdf", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.transformevent.transformer</code>.
     */
    public final TableField<TransformeventRecord, Integer> TRANSFORMER = createField("transformer", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.transformevent.inputcolumns</code>.
     */
    public final TableField<TransformeventRecord, String> INPUTCOLUMNS = createField("inputcolumns", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.transformevent.outputcolumns</code>.
     */
    public final TableField<TransformeventRecord, String> OUTPUTCOLUMNS = createField("outputcolumns", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.transformevent.experimentrun</code>.
     */
    public final TableField<TransformeventRecord, Integer> EXPERIMENTRUN = createField("experimentrun", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.transformevent</code> table reference
     */
    public Transformevent() {
        this(DSL.name("transformevent"), null);
    }

    /**
     * Create an aliased <code>public.transformevent</code> table reference
     */
    public Transformevent(String alias) {
        this(DSL.name(alias), TRANSFORMEVENT);
    }

    /**
     * Create an aliased <code>public.transformevent</code> table reference
     */
    public Transformevent(Name alias) {
        this(alias, TRANSFORMEVENT);
    }

    private Transformevent(Name alias, Table<TransformeventRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transformevent(Name alias, Table<TransformeventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Transformevent(Table<O> child, ForeignKey<O, TransformeventRecord> key) {
        super(child, key, TRANSFORMEVENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANSFORMEVENT_PKEY, Indexes.TRANSFORMEVENTINDEXEXPERIMENTRUN, Indexes.TRANSFORMEVENTINDEXNEWDF);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TransformeventRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRANSFORMEVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransformeventRecord> getPrimaryKey() {
        return Keys.TRANSFORMEVENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransformeventRecord>> getKeys() {
        return Arrays.<UniqueKey<TransformeventRecord>>asList(Keys.TRANSFORMEVENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TransformeventRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransformeventRecord, ?>>asList(Keys.TRANSFORMEVENT__TRANSFORMEVENT_OLDDF_FKEY, Keys.TRANSFORMEVENT__TRANSFORMEVENT_NEWDF_FKEY, Keys.TRANSFORMEVENT__TRANSFORMEVENT_TRANSFORMER_FKEY, Keys.TRANSFORMEVENT__TRANSFORMEVENT_EXPERIMENTRUN_FKEY);
    }

    public Dataframe transformevent_TransformeventOlddfFkey() {
        return new Dataframe(this, Keys.TRANSFORMEVENT__TRANSFORMEVENT_OLDDF_FKEY);
    }

    public Dataframe transformevent_TransformeventNewdfFkey() {
        return new Dataframe(this, Keys.TRANSFORMEVENT__TRANSFORMEVENT_NEWDF_FKEY);
    }

    public Transformer transformer() {
        return new Transformer(this, Keys.TRANSFORMEVENT__TRANSFORMEVENT_TRANSFORMER_FKEY);
    }

    public Experimentrun experimentrun() {
        return new Experimentrun(this, Keys.TRANSFORMEVENT__TRANSFORMEVENT_EXPERIMENTRUN_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transformevent as(String alias) {
        return new Transformevent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transformevent as(Name alias) {
        return new Transformevent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transformevent rename(String name) {
        return new Transformevent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transformevent rename(Name name) {
        return new Transformevent(name, null);
    }
}
