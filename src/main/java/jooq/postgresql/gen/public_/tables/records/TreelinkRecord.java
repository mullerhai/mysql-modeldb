/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.public_.tables.records;


import javax.annotation.Generated;

import jooq.postgresql.gen.public_.tables.Treelink;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TreelinkRecord extends UpdatableRecordImpl<TreelinkRecord> implements Record4<Integer, Integer, Integer, Integer> {

    private static final long serialVersionUID = -1090444149;

    /**
     * Setter for <code>public.treelink.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.treelink.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.treelink.parent</code>.
     */
    public void setParent(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.treelink.parent</code>.
     */
    public Integer getParent() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.treelink.child</code>.
     */
    public void setChild(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.treelink.child</code>.
     */
    public Integer getChild() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.treelink.isleft</code>.
     */
    public void setIsleft(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.treelink.isleft</code>.
     */
    public Integer getIsleft() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Integer, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Treelink.TREELINK.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Treelink.TREELINK.PARENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Treelink.TREELINK.CHILD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return Treelink.TREELINK.ISLEFT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getParent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getChild();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component4() {
        return getIsleft();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getParent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getChild();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getIsleft();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreelinkRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreelinkRecord value2(Integer value) {
        setParent(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreelinkRecord value3(Integer value) {
        setChild(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreelinkRecord value4(Integer value) {
        setIsleft(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreelinkRecord values(Integer value1, Integer value2, Integer value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TreelinkRecord
     */
    public TreelinkRecord() {
        super(Treelink.TREELINK);
    }

    /**
     * Create a detached, initialised TreelinkRecord
     */
    public TreelinkRecord(Integer id, Integer parent, Integer child, Integer isleft) {
        super(Treelink.TREELINK);

        set(0, id);
        set(1, parent);
        set(2, child);
        set(3, isleft);
    }
}
