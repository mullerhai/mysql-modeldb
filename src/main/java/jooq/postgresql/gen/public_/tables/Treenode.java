/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.public_.Indexes;
import jooq.postgresql.gen.public_.Keys;
import jooq.postgresql.gen.public_.Public;
import jooq.postgresql.gen.public_.tables.records.TreenodeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Treenode extends TableImpl<TreenodeRecord> {

    private static final long serialVersionUID = 1811989242;

    /**
     * The reference instance of <code>public.treenode</code>
     */
    public static final Treenode TREENODE = new Treenode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TreenodeRecord> getRecordType() {
        return TreenodeRecord.class;
    }

    /**
     * The column <code>public.treenode.id</code>.
     */
    public final TableField<TreenodeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('treenode_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.treenode.isleaf</code>.
     */
    public final TableField<TreenodeRecord, Integer> ISLEAF = createField("isleaf", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.treenode.prediction</code>.
     */
    public final TableField<TreenodeRecord, Double> PREDICTION = createField("prediction", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.treenode.impurity</code>.
     */
    public final TableField<TreenodeRecord, Double> IMPURITY = createField("impurity", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.treenode.gain</code>.
     */
    public final TableField<TreenodeRecord, Double> GAIN = createField("gain", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.treenode.splitindex</code>.
     */
    public final TableField<TreenodeRecord, Integer> SPLITINDEX = createField("splitindex", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.treenode.rootnode</code>.
     */
    public final TableField<TreenodeRecord, Integer> ROOTNODE = createField("rootnode", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.treenode</code> table reference
     */
    public Treenode() {
        this(DSL.name("treenode"), null);
    }

    /**
     * Create an aliased <code>public.treenode</code> table reference
     */
    public Treenode(String alias) {
        this(DSL.name(alias), TREENODE);
    }

    /**
     * Create an aliased <code>public.treenode</code> table reference
     */
    public Treenode(Name alias) {
        this(alias, TREENODE);
    }

    private Treenode(Name alias, Table<TreenodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Treenode(Name alias, Table<TreenodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Treenode(Table<O> child, ForeignKey<O, TreenodeRecord> key) {
        super(child, key, TREENODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TREENODE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TreenodeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TREENODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TreenodeRecord> getPrimaryKey() {
        return Keys.TREENODE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TreenodeRecord>> getKeys() {
        return Arrays.<UniqueKey<TreenodeRecord>>asList(Keys.TREENODE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TreenodeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TreenodeRecord, ?>>asList(Keys.TREENODE__TREENODE_ROOTNODE_FKEY);
    }

    public jooq.postgresql.gen.public_.tables.Treenode treenode() {
        return new jooq.postgresql.gen.public_.tables.Treenode(this, Keys.TREENODE__TREENODE_ROOTNODE_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Treenode as(String alias) {
        return new Treenode(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Treenode as(Name alias) {
        return new Treenode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Treenode rename(String name) {
        return new Treenode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Treenode rename(Name name) {
        return new Treenode(name, null);
    }
}
