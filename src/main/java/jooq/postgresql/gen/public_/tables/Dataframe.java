/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.public_.Indexes;
import jooq.postgresql.gen.public_.Keys;
import jooq.postgresql.gen.public_.Public;
import jooq.postgresql.gen.public_.tables.records.DataframeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dataframe extends TableImpl<DataframeRecord> {

    private static final long serialVersionUID = 1746884668;

    /**
     * The reference instance of <code>public.dataframe</code>
     */
    public static final Dataframe DATAFRAME = new Dataframe();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataframeRecord> getRecordType() {
        return DataframeRecord.class;
    }

    /**
     * The column <code>public.dataframe.id</code>.
     */
    public final TableField<DataframeRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('dataframe_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.dataframe.tag</code>.
     */
    public final TableField<DataframeRecord, String> TAG = createField("tag", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dataframe.numrows</code>.
     */
    public final TableField<DataframeRecord, Integer> NUMROWS = createField("numrows", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.dataframe.experimentrun</code>.
     */
    public final TableField<DataframeRecord, Integer> EXPERIMENTRUN = createField("experimentrun", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.dataframe.filepath</code>.
     */
    public final TableField<DataframeRecord, String> FILEPATH = createField("filepath", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.dataframe</code> table reference
     */
    public Dataframe() {
        this(DSL.name("dataframe"), null);
    }

    /**
     * Create an aliased <code>public.dataframe</code> table reference
     */
    public Dataframe(String alias) {
        this(DSL.name(alias), DATAFRAME);
    }

    /**
     * Create an aliased <code>public.dataframe</code> table reference
     */
    public Dataframe(Name alias) {
        this(alias, DATAFRAME);
    }

    private Dataframe(Name alias, Table<DataframeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dataframe(Name alias, Table<DataframeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Dataframe(Table<O> child, ForeignKey<O, DataframeRecord> key) {
        super(child, key, DATAFRAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATAFRAME_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DataframeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DATAFRAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DataframeRecord> getPrimaryKey() {
        return Keys.DATAFRAME_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DataframeRecord>> getKeys() {
        return Arrays.<UniqueKey<DataframeRecord>>asList(Keys.DATAFRAME_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DataframeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DataframeRecord, ?>>asList(Keys.DATAFRAME__DATAFRAME_EXPERIMENTRUN_FKEY);
    }

    public Experimentrun experimentrun() {
        return new Experimentrun(this, Keys.DATAFRAME__DATAFRAME_EXPERIMENTRUN_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dataframe as(String alias) {
        return new Dataframe(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dataframe as(Name alias) {
        return new Dataframe(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dataframe rename(String name) {
        return new Dataframe(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dataframe rename(Name name) {
        return new Dataframe(name, null);
    }
}
