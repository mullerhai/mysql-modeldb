/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.public_.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.public_.tables.Treenode;
import jooq.postgresql.gen.public_.tables.records.TreenodeRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TreenodeDao extends DAOImpl<TreenodeRecord, jooq.postgresql.gen.public_.tables.pojos.Treenode, Integer> {

    /**
     * Create a new TreenodeDao without any configuration
     */
    public TreenodeDao() {
        super(Treenode.TREENODE, jooq.postgresql.gen.public_.tables.pojos.Treenode.class);
    }

    /**
     * Create a new TreenodeDao with an attached configuration
     */
    public TreenodeDao(Configuration configuration) {
        super(Treenode.TREENODE, jooq.postgresql.gen.public_.tables.pojos.Treenode.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(jooq.postgresql.gen.public_.tables.pojos.Treenode object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<jooq.postgresql.gen.public_.tables.pojos.Treenode> fetchById(Integer... values) {
        return fetch(Treenode.TREENODE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public jooq.postgresql.gen.public_.tables.pojos.Treenode fetchOneById(Integer value) {
        return fetchOne(Treenode.TREENODE.ID, value);
    }

    /**
     * Fetch records that have <code>isleaf IN (values)</code>
     */
    public List<jooq.postgresql.gen.public_.tables.pojos.Treenode> fetchByIsleaf(Integer... values) {
        return fetch(Treenode.TREENODE.ISLEAF, values);
    }

    /**
     * Fetch records that have <code>prediction IN (values)</code>
     */
    public List<jooq.postgresql.gen.public_.tables.pojos.Treenode> fetchByPrediction(Double... values) {
        return fetch(Treenode.TREENODE.PREDICTION, values);
    }

    /**
     * Fetch records that have <code>impurity IN (values)</code>
     */
    public List<jooq.postgresql.gen.public_.tables.pojos.Treenode> fetchByImpurity(Double... values) {
        return fetch(Treenode.TREENODE.IMPURITY, values);
    }

    /**
     * Fetch records that have <code>gain IN (values)</code>
     */
    public List<jooq.postgresql.gen.public_.tables.pojos.Treenode> fetchByGain(Double... values) {
        return fetch(Treenode.TREENODE.GAIN, values);
    }

    /**
     * Fetch records that have <code>splitindex IN (values)</code>
     */
    public List<jooq.postgresql.gen.public_.tables.pojos.Treenode> fetchBySplitindex(Integer... values) {
        return fetch(Treenode.TREENODE.SPLITINDEX, values);
    }

    /**
     * Fetch records that have <code>rootnode IN (values)</code>
     */
    public List<jooq.postgresql.gen.public_.tables.pojos.Treenode> fetchByRootnode(Integer... values) {
        return fetch(Treenode.TREENODE.ROOTNODE, values);
    }
}
