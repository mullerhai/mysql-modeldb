/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.public_.Indexes;
import jooq.postgresql.gen.public_.Keys;
import jooq.postgresql.gen.public_.Public;
import jooq.postgresql.gen.public_.tables.records.LinearmodelRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Linearmodel extends TableImpl<LinearmodelRecord> {

    private static final long serialVersionUID = -86090148;

    /**
     * The reference instance of <code>public.linearmodel</code>
     */
    public static final Linearmodel LINEARMODEL = new Linearmodel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LinearmodelRecord> getRecordType() {
        return LinearmodelRecord.class;
    }

    /**
     * The column <code>public.linearmodel.id</code>.
     */
    public final TableField<LinearmodelRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('linearmodel_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.linearmodel.model</code>.
     */
    public final TableField<LinearmodelRecord, Integer> MODEL = createField("model", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.linearmodel.rmse</code>.
     */
    public final TableField<LinearmodelRecord, Double> RMSE = createField("rmse", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.linearmodel.explainedvariance</code>.
     */
    public final TableField<LinearmodelRecord, Double> EXPLAINEDVARIANCE = createField("explainedvariance", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.linearmodel.r2</code>.
     */
    public final TableField<LinearmodelRecord, Double> R2 = createField("r2", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>public.linearmodel</code> table reference
     */
    public Linearmodel() {
        this(DSL.name("linearmodel"), null);
    }

    /**
     * Create an aliased <code>public.linearmodel</code> table reference
     */
    public Linearmodel(String alias) {
        this(DSL.name(alias), LINEARMODEL);
    }

    /**
     * Create an aliased <code>public.linearmodel</code> table reference
     */
    public Linearmodel(Name alias) {
        this(alias, LINEARMODEL);
    }

    private Linearmodel(Name alias, Table<LinearmodelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Linearmodel(Name alias, Table<LinearmodelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Linearmodel(Table<O> child, ForeignKey<O, LinearmodelRecord> key) {
        super(child, key, LINEARMODEL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LINEARMODEL_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LinearmodelRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LINEARMODEL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LinearmodelRecord> getPrimaryKey() {
        return Keys.LINEARMODEL_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LinearmodelRecord>> getKeys() {
        return Arrays.<UniqueKey<LinearmodelRecord>>asList(Keys.LINEARMODEL_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<LinearmodelRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LinearmodelRecord, ?>>asList(Keys.LINEARMODEL__LINEARMODEL_MODEL_FKEY);
    }

    public Transformer transformer() {
        return new Transformer(this, Keys.LINEARMODEL__LINEARMODEL_MODEL_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Linearmodel as(String alias) {
        return new Linearmodel(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Linearmodel as(Name alias) {
        return new Linearmodel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Linearmodel rename(String name) {
        return new Linearmodel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Linearmodel rename(Name name) {
        return new Linearmodel(name, null);
    }
}
