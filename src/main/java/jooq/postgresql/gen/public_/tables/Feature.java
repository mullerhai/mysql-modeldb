/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.public_.Indexes;
import jooq.postgresql.gen.public_.Keys;
import jooq.postgresql.gen.public_.Public;
import jooq.postgresql.gen.public_.tables.records.FeatureRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Feature extends TableImpl<FeatureRecord> {

    private static final long serialVersionUID = 1135888327;

    /**
     * The reference instance of <code>public.feature</code>
     */
    public static final Feature FEATURE = new Feature();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeatureRecord> getRecordType() {
        return FeatureRecord.class;
    }

    /**
     * The column <code>public.feature.id</code>.
     */
    public final TableField<FeatureRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('feature_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.feature.name</code>.
     */
    public final TableField<FeatureRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.feature.featureindex</code>.
     */
    public final TableField<FeatureRecord, Integer> FEATUREINDEX = createField("featureindex", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.feature.importance</code>.
     */
    public final TableField<FeatureRecord, Double> IMPORTANCE = createField("importance", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.feature.transformer</code>.
     */
    public final TableField<FeatureRecord, Integer> TRANSFORMER = createField("transformer", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.feature</code> table reference
     */
    public Feature() {
        this(DSL.name("feature"), null);
    }

    /**
     * Create an aliased <code>public.feature</code> table reference
     */
    public Feature(String alias) {
        this(DSL.name(alias), FEATURE);
    }

    /**
     * Create an aliased <code>public.feature</code> table reference
     */
    public Feature(Name alias) {
        this(alias, FEATURE);
    }

    private Feature(Name alias, Table<FeatureRecord> aliased) {
        this(alias, aliased, null);
    }

    private Feature(Name alias, Table<FeatureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Feature(Table<O> child, ForeignKey<O, FeatureRecord> key) {
        super(child, key, FEATURE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FEATURE_PKEY, Indexes.FEATUREINDEXNAME, Indexes.FEATUREINDEXTRANSFORMER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FeatureRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FEATURE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FeatureRecord> getPrimaryKey() {
        return Keys.FEATURE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FeatureRecord>> getKeys() {
        return Arrays.<UniqueKey<FeatureRecord>>asList(Keys.FEATURE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FeatureRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FeatureRecord, ?>>asList(Keys.FEATURE__FEATURE_TRANSFORMER_FKEY);
    }

    public Transformer transformer() {
        return new Transformer(this, Keys.FEATURE__FEATURE_TRANSFORMER_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Feature as(String alias) {
        return new Feature(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Feature as(Name alias) {
        return new Feature(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Feature rename(String name) {
        return new Feature(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Feature rename(Name name) {
        return new Feature(name, null);
    }
}
