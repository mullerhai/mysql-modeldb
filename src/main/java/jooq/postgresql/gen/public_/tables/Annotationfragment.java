/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.public_.Indexes;
import jooq.postgresql.gen.public_.Keys;
import jooq.postgresql.gen.public_.Public;
import jooq.postgresql.gen.public_.tables.records.AnnotationfragmentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Annotationfragment extends TableImpl<AnnotationfragmentRecord> {

    private static final long serialVersionUID = -52685710;

    /**
     * The reference instance of <code>public.annotationfragment</code>
     */
    public static final Annotationfragment ANNOTATIONFRAGMENT = new Annotationfragment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnnotationfragmentRecord> getRecordType() {
        return AnnotationfragmentRecord.class;
    }

    /**
     * The column <code>public.annotationfragment.id</code>.
     */
    public final TableField<AnnotationfragmentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('annotationfragment_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.annotationfragment.annotation</code>.
     */
    public final TableField<AnnotationfragmentRecord, Integer> ANNOTATION = createField("annotation", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.annotationfragment.fragmentindex</code>.
     */
    public final TableField<AnnotationfragmentRecord, Integer> FRAGMENTINDEX = createField("fragmentindex", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.annotationfragment.type</code>.
     */
    public final TableField<AnnotationfragmentRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.annotationfragment.transformer</code>.
     */
    public final TableField<AnnotationfragmentRecord, Integer> TRANSFORMER = createField("transformer", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.annotationfragment.dataframe</code>.
     */
    public final TableField<AnnotationfragmentRecord, Integer> DATAFRAME = createField("dataframe", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.annotationfragment.spec</code>.
     */
    public final TableField<AnnotationfragmentRecord, Integer> SPEC = createField("spec", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.annotationfragment.message</code>.
     */
    public final TableField<AnnotationfragmentRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.annotationfragment.experimentrun</code>.
     */
    public final TableField<AnnotationfragmentRecord, Integer> EXPERIMENTRUN = createField("experimentrun", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.annotationfragment</code> table reference
     */
    public Annotationfragment() {
        this(DSL.name("annotationfragment"), null);
    }

    /**
     * Create an aliased <code>public.annotationfragment</code> table reference
     */
    public Annotationfragment(String alias) {
        this(DSL.name(alias), ANNOTATIONFRAGMENT);
    }

    /**
     * Create an aliased <code>public.annotationfragment</code> table reference
     */
    public Annotationfragment(Name alias) {
        this(alias, ANNOTATIONFRAGMENT);
    }

    private Annotationfragment(Name alias, Table<AnnotationfragmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Annotationfragment(Name alias, Table<AnnotationfragmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Annotationfragment(Table<O> child, ForeignKey<O, AnnotationfragmentRecord> key) {
        super(child, key, ANNOTATIONFRAGMENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ANNOTATIONFRAGMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AnnotationfragmentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ANNOTATIONFRAGMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AnnotationfragmentRecord> getPrimaryKey() {
        return Keys.ANNOTATIONFRAGMENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AnnotationfragmentRecord>> getKeys() {
        return Arrays.<UniqueKey<AnnotationfragmentRecord>>asList(Keys.ANNOTATIONFRAGMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AnnotationfragmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AnnotationfragmentRecord, ?>>asList(Keys.ANNOTATIONFRAGMENT__ANNOTATIONFRAGMENT_ANNOTATION_FKEY, Keys.ANNOTATIONFRAGMENT__ANNOTATIONFRAGMENT_TRANSFORMER_FKEY, Keys.ANNOTATIONFRAGMENT__ANNOTATIONFRAGMENT_DATAFRAME_FKEY, Keys.ANNOTATIONFRAGMENT__ANNOTATIONFRAGMENT_SPEC_FKEY, Keys.ANNOTATIONFRAGMENT__ANNOTATIONFRAGMENT_EXPERIMENTRUN_FKEY);
    }

    public Annotation annotation() {
        return new Annotation(this, Keys.ANNOTATIONFRAGMENT__ANNOTATIONFRAGMENT_ANNOTATION_FKEY);
    }

    public Transformer transformer() {
        return new Transformer(this, Keys.ANNOTATIONFRAGMENT__ANNOTATIONFRAGMENT_TRANSFORMER_FKEY);
    }

    public Dataframe dataframe() {
        return new Dataframe(this, Keys.ANNOTATIONFRAGMENT__ANNOTATIONFRAGMENT_DATAFRAME_FKEY);
    }

    public Transformerspec transformerspec() {
        return new Transformerspec(this, Keys.ANNOTATIONFRAGMENT__ANNOTATIONFRAGMENT_SPEC_FKEY);
    }

    public Experimentrun experimentrun() {
        return new Experimentrun(this, Keys.ANNOTATIONFRAGMENT__ANNOTATIONFRAGMENT_EXPERIMENTRUN_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Annotationfragment as(String alias) {
        return new Annotationfragment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Annotationfragment as(Name alias) {
        return new Annotationfragment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Annotationfragment rename(String name) {
        return new Annotationfragment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Annotationfragment rename(Name name) {
        return new Annotationfragment(name, null);
    }
}
