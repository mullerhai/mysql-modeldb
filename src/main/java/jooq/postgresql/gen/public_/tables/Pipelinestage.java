/*
 * This file is generated by jOOQ.
 */
package jooq.postgresql.gen.public_.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.postgresql.gen.public_.Indexes;
import jooq.postgresql.gen.public_.Keys;
import jooq.postgresql.gen.public_.Public;
import jooq.postgresql.gen.public_.tables.records.PipelinestageRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pipelinestage extends TableImpl<PipelinestageRecord> {

    private static final long serialVersionUID = 450135204;

    /**
     * The reference instance of <code>public.pipelinestage</code>
     */
    public static final Pipelinestage PIPELINESTAGE = new Pipelinestage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PipelinestageRecord> getRecordType() {
        return PipelinestageRecord.class;
    }

    /**
     * The column <code>public.pipelinestage.id</code>.
     */
    public final TableField<PipelinestageRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('pipelinestage_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.pipelinestage.pipelinefitevent</code>.
     */
    public final TableField<PipelinestageRecord, Integer> PIPELINEFITEVENT = createField("pipelinefitevent", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pipelinestage.transformorfitevent</code>.
     */
    public final TableField<PipelinestageRecord, Integer> TRANSFORMORFITEVENT = createField("transformorfitevent", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pipelinestage.isfit</code>.
     */
    public final TableField<PipelinestageRecord, Integer> ISFIT = createField("isfit", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pipelinestage.stagenumber</code>.
     */
    public final TableField<PipelinestageRecord, Integer> STAGENUMBER = createField("stagenumber", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pipelinestage.experimentrun</code>.
     */
    public final TableField<PipelinestageRecord, Integer> EXPERIMENTRUN = createField("experimentrun", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.pipelinestage</code> table reference
     */
    public Pipelinestage() {
        this(DSL.name("pipelinestage"), null);
    }

    /**
     * Create an aliased <code>public.pipelinestage</code> table reference
     */
    public Pipelinestage(String alias) {
        this(DSL.name(alias), PIPELINESTAGE);
    }

    /**
     * Create an aliased <code>public.pipelinestage</code> table reference
     */
    public Pipelinestage(Name alias) {
        this(alias, PIPELINESTAGE);
    }

    private Pipelinestage(Name alias, Table<PipelinestageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pipelinestage(Name alias, Table<PipelinestageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Pipelinestage(Table<O> child, ForeignKey<O, PipelinestageRecord> key) {
        super(child, key, PIPELINESTAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PIPELINESTAGE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PipelinestageRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PIPELINESTAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PipelinestageRecord> getPrimaryKey() {
        return Keys.PIPELINESTAGE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PipelinestageRecord>> getKeys() {
        return Arrays.<UniqueKey<PipelinestageRecord>>asList(Keys.PIPELINESTAGE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PipelinestageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PipelinestageRecord, ?>>asList(Keys.PIPELINESTAGE__PIPELINESTAGE_PIPELINEFITEVENT_FKEY, Keys.PIPELINESTAGE__PIPELINESTAGE_TRANSFORMORFITEVENT_FKEY, Keys.PIPELINESTAGE__PIPELINESTAGE_EXPERIMENTRUN_FKEY);
    }

    public Fitevent fitevent() {
        return new Fitevent(this, Keys.PIPELINESTAGE__PIPELINESTAGE_PIPELINEFITEVENT_FKEY);
    }

    public Event event() {
        return new Event(this, Keys.PIPELINESTAGE__PIPELINESTAGE_TRANSFORMORFITEVENT_FKEY);
    }

    public Experimentrun experimentrun() {
        return new Experimentrun(this, Keys.PIPELINESTAGE__PIPELINESTAGE_EXPERIMENTRUN_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pipelinestage as(String alias) {
        return new Pipelinestage(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pipelinestage as(Name alias) {
        return new Pipelinestage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pipelinestage rename(String name) {
        return new Pipelinestage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pipelinestage rename(Name name) {
        return new Pipelinestage(name, null);
    }
}
