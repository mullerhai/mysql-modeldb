/*
 * This file is generated by jOOQ.
 */
package jooq.mysql.gen.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.mysql.gen.Indexes;
import jooq.mysql.gen.Keys;
import jooq.mysql.gen.ModeldbTest;
import jooq.mysql.gen.tables.records.HyperparameterRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Hyperparameter extends TableImpl<HyperparameterRecord> {

    private static final long serialVersionUID = 1890778619;

    /**
     * The reference instance of <code>modeldb_test.HyperParameter</code>
     */
    public static final Hyperparameter HYPERPARAMETER = new Hyperparameter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HyperparameterRecord> getRecordType() {
        return HyperparameterRecord.class;
    }

    /**
     * The column <code>modeldb_test.HyperParameter.id</code>.
     */
    public final TableField<HyperparameterRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>modeldb_test.HyperParameter.spec</code>.
     */
    public final TableField<HyperparameterRecord, Integer> SPEC = createField("spec", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.HyperParameter.paramName</code>.
     */
    public final TableField<HyperparameterRecord, String> PARAMNAME = createField("paramName", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.HyperParameter.paramType</code>.
     */
    public final TableField<HyperparameterRecord, String> PARAMTYPE = createField("paramType", org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>modeldb_test.HyperParameter.paramValue</code>.
     */
    public final TableField<HyperparameterRecord, String> PARAMVALUE = createField("paramValue", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.HyperParameter.paramMinValue</code>.
     */
    public final TableField<HyperparameterRecord, Double> PARAMMINVALUE = createField("paramMinValue", org.jooq.impl.SQLDataType.FLOAT, this, "");

    /**
     * The column <code>modeldb_test.HyperParameter.paramMaxValue</code>.
     */
    public final TableField<HyperparameterRecord, Double> PARAMMAXVALUE = createField("paramMaxValue", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>modeldb_test.HyperParameter.experimentRun</code>.
     */
    public final TableField<HyperparameterRecord, Integer> EXPERIMENTRUN = createField("experimentRun", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>modeldb_test.HyperParameter</code> table reference
     */
    public Hyperparameter() {
        this(DSL.name("HyperParameter"), null);
    }

    /**
     * Create an aliased <code>modeldb_test.HyperParameter</code> table reference
     */
    public Hyperparameter(String alias) {
        this(DSL.name(alias), HYPERPARAMETER);
    }

    /**
     * Create an aliased <code>modeldb_test.HyperParameter</code> table reference
     */
    public Hyperparameter(Name alias) {
        this(alias, HYPERPARAMETER);
    }

    private Hyperparameter(Name alias, Table<HyperparameterRecord> aliased) {
        this(alias, aliased, null);
    }

    private Hyperparameter(Name alias, Table<HyperparameterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Hyperparameter(Table<O> child, ForeignKey<O, HyperparameterRecord> key) {
        super(child, key, HYPERPARAMETER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ModeldbTest.MODELDB_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.HYPERPARAMETER_EXPERIMENTRUN, Indexes.HYPERPARAMETER_PRIMARY, Indexes.HYPERPARAMETER_SPEC);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<HyperparameterRecord, Integer> getIdentity() {
        return Keys.IDENTITY_HYPERPARAMETER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HyperparameterRecord> getPrimaryKey() {
        return Keys.KEY_HYPERPARAMETER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HyperparameterRecord>> getKeys() {
        return Arrays.<UniqueKey<HyperparameterRecord>>asList(Keys.KEY_HYPERPARAMETER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<HyperparameterRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<HyperparameterRecord, ?>>asList(Keys.HYPERPARAMETER_IBFK_1, Keys.HYPERPARAMETER_IBFK_2);
    }

    public Transformerspec transformerspec() {
        return new Transformerspec(this, Keys.HYPERPARAMETER_IBFK_1);
    }

    public Experimentrun experimentrun() {
        return new Experimentrun(this, Keys.HYPERPARAMETER_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Hyperparameter as(String alias) {
        return new Hyperparameter(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Hyperparameter as(Name alias) {
        return new Hyperparameter(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Hyperparameter rename(String name) {
        return new Hyperparameter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hyperparameter rename(Name name) {
        return new Hyperparameter(name, null);
    }
}
