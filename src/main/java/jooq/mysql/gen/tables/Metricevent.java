/*
 * This file is generated by jOOQ.
 */
package jooq.mysql.gen.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.mysql.gen.Indexes;
import jooq.mysql.gen.Keys;
import jooq.mysql.gen.ModeldbTest;
import jooq.mysql.gen.tables.records.MetriceventRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Metricevent extends TableImpl<MetriceventRecord> {

    private static final long serialVersionUID = -680052198;

    /**
     * The reference instance of <code>modeldb_test.MetricEvent</code>
     */
    public static final Metricevent METRICEVENT = new Metricevent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetriceventRecord> getRecordType() {
        return MetriceventRecord.class;
    }

    /**
     * The column <code>modeldb_test.MetricEvent.id</code>.
     */
    public final TableField<MetriceventRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>modeldb_test.MetricEvent.transformer</code>.
     */
    public final TableField<MetriceventRecord, Integer> TRANSFORMER = createField("transformer", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.MetricEvent.df</code>.
     */
    public final TableField<MetriceventRecord, Integer> DF = createField("df", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.MetricEvent.metricType</code>.
     */
    public final TableField<MetriceventRecord, String> METRICTYPE = createField("metricType", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.MetricEvent.metricValue</code>.
     */
    public final TableField<MetriceventRecord, Double> METRICVALUE = createField("metricValue", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.MetricEvent.experimentRun</code>.
     */
    public final TableField<MetriceventRecord, Integer> EXPERIMENTRUN = createField("experimentRun", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>modeldb_test.MetricEvent</code> table reference
     */
    public Metricevent() {
        this(DSL.name("MetricEvent"), null);
    }

    /**
     * Create an aliased <code>modeldb_test.MetricEvent</code> table reference
     */
    public Metricevent(String alias) {
        this(DSL.name(alias), METRICEVENT);
    }

    /**
     * Create an aliased <code>modeldb_test.MetricEvent</code> table reference
     */
    public Metricevent(Name alias) {
        this(alias, METRICEVENT);
    }

    private Metricevent(Name alias, Table<MetriceventRecord> aliased) {
        this(alias, aliased, null);
    }

    private Metricevent(Name alias, Table<MetriceventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Metricevent(Table<O> child, ForeignKey<O, MetriceventRecord> key) {
        super(child, key, METRICEVENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ModeldbTest.MODELDB_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.METRICEVENT_DF, Indexes.METRICEVENT_EXPERIMENTRUN, Indexes.METRICEVENT_PRIMARY, Indexes.METRICEVENT_TRANSFORMER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MetriceventRecord, Integer> getIdentity() {
        return Keys.IDENTITY_METRICEVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MetriceventRecord> getPrimaryKey() {
        return Keys.KEY_METRICEVENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MetriceventRecord>> getKeys() {
        return Arrays.<UniqueKey<MetriceventRecord>>asList(Keys.KEY_METRICEVENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MetriceventRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MetriceventRecord, ?>>asList(Keys.METRICEVENT_IBFK_1, Keys.METRICEVENT_IBFK_2, Keys.METRICEVENT_IBFK_3);
    }

    public Transformer transformer() {
        return new Transformer(this, Keys.METRICEVENT_IBFK_1);
    }

    public Dataframe dataframe() {
        return new Dataframe(this, Keys.METRICEVENT_IBFK_2);
    }

    public Experimentrun experimentrun() {
        return new Experimentrun(this, Keys.METRICEVENT_IBFK_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Metricevent as(String alias) {
        return new Metricevent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Metricevent as(Name alias) {
        return new Metricevent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Metricevent rename(String name) {
        return new Metricevent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Metricevent rename(Name name) {
        return new Metricevent(name, null);
    }
}
