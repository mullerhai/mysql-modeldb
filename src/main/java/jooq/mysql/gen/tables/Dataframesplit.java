/*
 * This file is generated by jOOQ.
 */
package jooq.mysql.gen.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.mysql.gen.Indexes;
import jooq.mysql.gen.Keys;
import jooq.mysql.gen.ModeldbTest;
import jooq.mysql.gen.tables.records.DataframesplitRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dataframesplit extends TableImpl<DataframesplitRecord> {

    private static final long serialVersionUID = 848097760;

    /**
     * The reference instance of <code>modeldb_test.DataFrameSplit</code>
     */
    public static final Dataframesplit DATAFRAMESPLIT = new Dataframesplit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataframesplitRecord> getRecordType() {
        return DataframesplitRecord.class;
    }

    /**
     * The column <code>modeldb_test.DataFrameSplit.id</code>.
     */
    public final TableField<DataframesplitRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>modeldb_test.DataFrameSplit.splitEventId</code>.
     */
    public final TableField<DataframesplitRecord, Integer> SPLITEVENTID = createField("splitEventId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.DataFrameSplit.weight</code>.
     */
    public final TableField<DataframesplitRecord, Double> WEIGHT = createField("weight", org.jooq.impl.SQLDataType.FLOAT.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.DataFrameSplit.dataFrameId</code>.
     */
    public final TableField<DataframesplitRecord, Integer> DATAFRAMEID = createField("dataFrameId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.DataFrameSplit.experimentRun</code>.
     */
    public final TableField<DataframesplitRecord, Integer> EXPERIMENTRUN = createField("experimentRun", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>modeldb_test.DataFrameSplit</code> table reference
     */
    public Dataframesplit() {
        this(DSL.name("DataFrameSplit"), null);
    }

    /**
     * Create an aliased <code>modeldb_test.DataFrameSplit</code> table reference
     */
    public Dataframesplit(String alias) {
        this(DSL.name(alias), DATAFRAMESPLIT);
    }

    /**
     * Create an aliased <code>modeldb_test.DataFrameSplit</code> table reference
     */
    public Dataframesplit(Name alias) {
        this(alias, DATAFRAMESPLIT);
    }

    private Dataframesplit(Name alias, Table<DataframesplitRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dataframesplit(Name alias, Table<DataframesplitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Dataframesplit(Table<O> child, ForeignKey<O, DataframesplitRecord> key) {
        super(child, key, DATAFRAMESPLIT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ModeldbTest.MODELDB_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATAFRAMESPLIT_DATAFRAMEID, Indexes.DATAFRAMESPLIT_EXPERIMENTRUN, Indexes.DATAFRAMESPLIT_PRIMARY, Indexes.DATAFRAMESPLIT_SPLITEVENTID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DataframesplitRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DATAFRAMESPLIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DataframesplitRecord> getPrimaryKey() {
        return Keys.KEY_DATAFRAMESPLIT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DataframesplitRecord>> getKeys() {
        return Arrays.<UniqueKey<DataframesplitRecord>>asList(Keys.KEY_DATAFRAMESPLIT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DataframesplitRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DataframesplitRecord, ?>>asList(Keys.DATAFRAMESPLIT_IBFK_1, Keys.DATAFRAMESPLIT_IBFK_2, Keys.DATAFRAMESPLIT_IBFK_3);
    }

    public Randomsplitevent randomsplitevent() {
        return new Randomsplitevent(this, Keys.DATAFRAMESPLIT_IBFK_1);
    }

    public Dataframe dataframe() {
        return new Dataframe(this, Keys.DATAFRAMESPLIT_IBFK_2);
    }

    public Experimentrun experimentrun() {
        return new Experimentrun(this, Keys.DATAFRAMESPLIT_IBFK_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dataframesplit as(String alias) {
        return new Dataframesplit(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dataframesplit as(Name alias) {
        return new Dataframesplit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dataframesplit rename(String name) {
        return new Dataframesplit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dataframesplit rename(Name name) {
        return new Dataframesplit(name, null);
    }
}
