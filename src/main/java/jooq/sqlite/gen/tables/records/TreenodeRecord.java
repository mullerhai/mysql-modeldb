/*
 * This file is generated by jOOQ.
 */
package jooq.sqlite.gen.tables.records;


import javax.annotation.Generated;

import jooq.sqlite.gen.tables.Treenode;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TreenodeRecord extends UpdatableRecordImpl<TreenodeRecord> implements Record7<Integer, Integer, Double, Double, Double, Integer, Integer> {

    private static final long serialVersionUID = -149786784;

    /**
     * Setter for <code>modeldb_test.TreeNode.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>modeldb_test.TreeNode.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>modeldb_test.TreeNode.isLeaf</code>.
     */
    public void setIsleaf(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>modeldb_test.TreeNode.isLeaf</code>.
     */
    public Integer getIsleaf() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>modeldb_test.TreeNode.prediction</code>.
     */
    public void setPrediction(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>modeldb_test.TreeNode.prediction</code>.
     */
    public Double getPrediction() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>modeldb_test.TreeNode.impurity</code>.
     */
    public void setImpurity(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>modeldb_test.TreeNode.impurity</code>.
     */
    public Double getImpurity() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>modeldb_test.TreeNode.gain</code>.
     */
    public void setGain(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>modeldb_test.TreeNode.gain</code>.
     */
    public Double getGain() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>modeldb_test.TreeNode.splitIndex</code>.
     */
    public void setSplitindex(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>modeldb_test.TreeNode.splitIndex</code>.
     */
    public Integer getSplitindex() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>modeldb_test.TreeNode.rootNode</code>.
     */
    public void setRootnode(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>modeldb_test.TreeNode.rootNode</code>.
     */
    public Integer getRootnode() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Integer, Integer, Double, Double, Double, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<Integer, Integer, Double, Double, Double, Integer, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Treenode.TREENODE.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Treenode.TREENODE.ISLEAF;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field3() {
        return Treenode.TREENODE.PREDICTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field4() {
        return Treenode.TREENODE.IMPURITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field5() {
        return Treenode.TREENODE.GAIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field6() {
        return Treenode.TREENODE.SPLITINDEX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field7() {
        return Treenode.TREENODE.ROOTNODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getIsleaf();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component3() {
        return getPrediction();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component4() {
        return getImpurity();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component5() {
        return getGain();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component6() {
        return getSplitindex();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component7() {
        return getRootnode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getIsleaf();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value3() {
        return getPrediction();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value4() {
        return getImpurity();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value5() {
        return getGain();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value6() {
        return getSplitindex();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value7() {
        return getRootnode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreenodeRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreenodeRecord value2(Integer value) {
        setIsleaf(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreenodeRecord value3(Double value) {
        setPrediction(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreenodeRecord value4(Double value) {
        setImpurity(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreenodeRecord value5(Double value) {
        setGain(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreenodeRecord value6(Integer value) {
        setSplitindex(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreenodeRecord value7(Integer value) {
        setRootnode(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreenodeRecord values(Integer value1, Integer value2, Double value3, Double value4, Double value5, Integer value6, Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TreenodeRecord
     */
    public TreenodeRecord() {
        super(Treenode.TREENODE);
    }

    /**
     * Create a detached, initialised TreenodeRecord
     */
    public TreenodeRecord(Integer id, Integer isleaf, Double prediction, Double impurity, Double gain, Integer splitindex, Integer rootnode) {
        super(Treenode.TREENODE);

        set(0, id);
        set(1, isleaf);
        set(2, prediction);
        set(3, impurity);
        set(4, gain);
        set(5, splitindex);
        set(6, rootnode);
    }
}
