/*
 * This file is generated by jOOQ.
 */
package jooq.sqlite.gen.tables.records;


import javax.annotation.Generated;

import jooq.sqlite.gen.tables.Gridcellcrossvalidation;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GridcellcrossvalidationRecord extends UpdatableRecordImpl<GridcellcrossvalidationRecord> implements Record4<Integer, Integer, Integer, Integer> {

    private static final long serialVersionUID = -224565843;

    /**
     * Setter for <code>modeldb_test.GridCellCrossValidation.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>modeldb_test.GridCellCrossValidation.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>modeldb_test.GridCellCrossValidation.gridSearch</code>.
     */
    public void setGridsearch(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>modeldb_test.GridCellCrossValidation.gridSearch</code>.
     */
    public Integer getGridsearch() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>modeldb_test.GridCellCrossValidation.crossValidation</code>.
     */
    public void setCrossvalidation(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>modeldb_test.GridCellCrossValidation.crossValidation</code>.
     */
    public Integer getCrossvalidation() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>modeldb_test.GridCellCrossValidation.experimentRun</code>.
     */
    public void setExperimentrun(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>modeldb_test.GridCellCrossValidation.experimentRun</code>.
     */
    public Integer getExperimentrun() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Integer, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION.GRIDSEARCH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION.CROSSVALIDATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION.EXPERIMENTRUN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getGridsearch();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getCrossvalidation();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component4() {
        return getExperimentrun();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getGridsearch();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getCrossvalidation();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getExperimentrun();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GridcellcrossvalidationRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GridcellcrossvalidationRecord value2(Integer value) {
        setGridsearch(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GridcellcrossvalidationRecord value3(Integer value) {
        setCrossvalidation(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GridcellcrossvalidationRecord value4(Integer value) {
        setExperimentrun(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GridcellcrossvalidationRecord values(Integer value1, Integer value2, Integer value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GridcellcrossvalidationRecord
     */
    public GridcellcrossvalidationRecord() {
        super(Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION);
    }

    /**
     * Create a detached, initialised GridcellcrossvalidationRecord
     */
    public GridcellcrossvalidationRecord(Integer id, Integer gridsearch, Integer crossvalidation, Integer experimentrun) {
        super(Gridcellcrossvalidation.GRIDCELLCROSSVALIDATION);

        set(0, id);
        set(1, gridsearch);
        set(2, crossvalidation);
        set(3, experimentrun);
    }
}
