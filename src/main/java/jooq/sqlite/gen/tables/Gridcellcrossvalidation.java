/*
 * This file is generated by jOOQ.
 */
package jooq.sqlite.gen.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.sqlite.gen.Indexes;
import jooq.sqlite.gen.Keys;
import jooq.sqlite.gen.ModeldbTest;
import jooq.sqlite.gen.tables.records.GridcellcrossvalidationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Gridcellcrossvalidation extends TableImpl<GridcellcrossvalidationRecord> {

    private static final long serialVersionUID = 27627752;

    /**
     * The reference instance of <code>modeldb_test.GridCellCrossValidation</code>
     */
    public static final Gridcellcrossvalidation GRIDCELLCROSSVALIDATION = new Gridcellcrossvalidation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GridcellcrossvalidationRecord> getRecordType() {
        return GridcellcrossvalidationRecord.class;
    }

    /**
     * The column <code>modeldb_test.GridCellCrossValidation.id</code>.
     */
    public final TableField<GridcellcrossvalidationRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>modeldb_test.GridCellCrossValidation.gridSearch</code>.
     */
    public final TableField<GridcellcrossvalidationRecord, Integer> GRIDSEARCH = createField("gridSearch", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.GridCellCrossValidation.crossValidation</code>.
     */
    public final TableField<GridcellcrossvalidationRecord, Integer> CROSSVALIDATION = createField("crossValidation", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.GridCellCrossValidation.experimentRun</code>.
     */
    public final TableField<GridcellcrossvalidationRecord, Integer> EXPERIMENTRUN = createField("experimentRun", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>modeldb_test.GridCellCrossValidation</code> table reference
     */
    public Gridcellcrossvalidation() {
        this(DSL.name("GridCellCrossValidation"), null);
    }

    /**
     * Create an aliased <code>modeldb_test.GridCellCrossValidation</code> table reference
     */
    public Gridcellcrossvalidation(String alias) {
        this(DSL.name(alias), GRIDCELLCROSSVALIDATION);
    }

    /**
     * Create an aliased <code>modeldb_test.GridCellCrossValidation</code> table reference
     */
    public Gridcellcrossvalidation(Name alias) {
        this(alias, GRIDCELLCROSSVALIDATION);
    }

    private Gridcellcrossvalidation(Name alias, Table<GridcellcrossvalidationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Gridcellcrossvalidation(Name alias, Table<GridcellcrossvalidationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Gridcellcrossvalidation(Table<O> child, ForeignKey<O, GridcellcrossvalidationRecord> key) {
        super(child, key, GRIDCELLCROSSVALIDATION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ModeldbTest.MODELDB_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GRIDCELLCROSSVALIDATION_CROSSVALIDATION, Indexes.GRIDCELLCROSSVALIDATION_EXPERIMENTRUN, Indexes.GRIDCELLCROSSVALIDATION_GRIDSEARCH, Indexes.GRIDCELLCROSSVALIDATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GridcellcrossvalidationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GRIDCELLCROSSVALIDATION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GridcellcrossvalidationRecord> getPrimaryKey() {
        return Keys.KEY_GRIDCELLCROSSVALIDATION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GridcellcrossvalidationRecord>> getKeys() {
        return Arrays.<UniqueKey<GridcellcrossvalidationRecord>>asList(Keys.KEY_GRIDCELLCROSSVALIDATION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<GridcellcrossvalidationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GridcellcrossvalidationRecord, ?>>asList(Keys.GRIDCELLCROSSVALIDATION_IBFK_1, Keys.GRIDCELLCROSSVALIDATION_IBFK_2, Keys.GRIDCELLCROSSVALIDATION_IBFK_3);
    }

    public Gridsearchcrossvalidationevent gridsearchcrossvalidationevent() {
        return new Gridsearchcrossvalidationevent(this, Keys.GRIDCELLCROSSVALIDATION_IBFK_1);
    }

    public Crossvalidationevent crossvalidationevent() {
        return new Crossvalidationevent(this, Keys.GRIDCELLCROSSVALIDATION_IBFK_2);
    }

    public Experimentrun experimentrun() {
        return new Experimentrun(this, Keys.GRIDCELLCROSSVALIDATION_IBFK_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Gridcellcrossvalidation as(String alias) {
        return new Gridcellcrossvalidation(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Gridcellcrossvalidation as(Name alias) {
        return new Gridcellcrossvalidation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Gridcellcrossvalidation rename(String name) {
        return new Gridcellcrossvalidation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Gridcellcrossvalidation rename(Name name) {
        return new Gridcellcrossvalidation(name, null);
    }
}
